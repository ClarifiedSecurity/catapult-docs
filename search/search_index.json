{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Enter the Catapult","text":"<p>Getting started with Catapult</p>"},{"location":"catapult/01-installation.html","title":"Installation","text":"<p>Catapult can run in <code>Linux</code>, <code>Windows (WSL)</code> or <code>MacOS</code>. For Windows follow the Windows Subsystem for Linux section to pre-configure WSL and then return to Quickstart.</p>"},{"location":"catapult/01-installation.html#quickstart","title":"Quickstart","text":"<ul> <li>Make sure all of the SSH keypairs you need are loaded into your ssh-agent. Catapult will use them to connect to the VMs.</li> <li>Make sure you have <code>git</code> installed.</li> <li>Run the following commands to install and configure Catapult:</li> </ul> <pre><code>git clone https://github.com/ClarifiedSecurity/catapult &amp;&amp; \\\ncd catapult &amp;&amp; \\\n./install.sh\n</code></pre> <ul> <li>You can run <code>./install.sh</code> multiple times until it finishes without errors.</li> <li>You can also add use <code>./install.sh AUTOINSTALL</code> for unattended installation.</li> <li>For Linux that requires sudo password or MacOS you can use this command for unattended installation: <code>echo \"YourSudoPassword\" | ./install.sh AUTOINSTALL</code> Leave a space before the command to prevent it from being saved in the shell history.</li> </ul>"},{"location":"catapult/01-installation.html#windows-subsystem-for-linux","title":"Windows Subsystem for Linux","text":"<p>Log in interactively (over RDP or locally) to your Windows machine with an account that is in the Administrators group and run the following commands in PowerShell. The first login needs to be with an administrative account because the WSL installation needs to be done with admin rights. After the first installation you can use a non-admin account to log in.</p> <pre><code>Enable-WindowsOptionalFeature -FeatureName Microsoft-Windows-Subsystem-Linux -Online -NoRestart\nwsl --install\n</code></pre> <ul> <li>Restart Windows</li> <li>If your user account IS in the Administrators group just log in, start Ubuntu from the start menu and follow the instructions to finalize the setup.</li> <li>If your user account IS NOT in the Administrators group you need to run the following commands in non-admin PowerShell after your login:</li> </ul> <pre><code>wsl --update\nwsl --install -d Ubuntu\n</code></pre> <ul> <li> <p>After that follow the instructions on screen to finalize the setup.</p> </li> <li> <p>Make sure all needed SSH keypairs are in <code>~/.ssh</code> folder in the WSL Ubuntu and ssh-agent is started. For easy-to-use SSH Agent you can follow this guide. You can use this method to add multiple keys to the SSH Agent. If you don't have SSH agent up and running the installation script will fail</p> </li> </ul> <p>When WSL is configured successfully then I'll show up in Windows Explorer as a network drive. You can use it to copy files between your host and the WSL system. On Windows we suggest using VSCode with the Remote - WSL extension to edit the files in WSL and Windows Terminal for easy connection to WSL.</p> <ul> <li>When your Ubuntu shell is ready, return to Quickstart</li> </ul>"},{"location":"catapult/01-installation.html#caveats","title":"Caveats","text":"<p>If you are using a Linux VM with a user ID that is not 1000 (you can check it with the <code>id</code> command) the Catapult Docker image will be built locally during each update. This means that the updates will just take a bit longer.</p>"},{"location":"catapult/20-how-to-use.html","title":"How to use","text":"<p>Catapult's commands fall into two categories:</p> <ul> <li>External commands - All commands that start with <code>make</code> are external commands and are used to manage the Catapult container itself.</li> <li>Internal commands - All commands that start with <code>ctp</code> are internal commands and are used when the user is inside the Catapult container.</li> </ul> <p>Catapult has 2 modes for modifications:</p> <ul> <li>Personalization - Where users can set their own preferences that will only affect them.</li> <li>Customization - Where preferences are configured in a way that they apply to your team/organization etc.</li> </ul> <p>Follow the <code># How to Personalization</code> &amp; <code># How to Customize</code> sections if you want to personalize or customize Catapult.</p>"},{"location":"catapult/20-how-to-use.html#secrets","title":"Secrets","text":"<p>When running catapult for the first time it'll ask you to create a new Ansible Vault file and fill it out with your secrets. The secrets are used to connect to the hypervisors, cloud providers, and other services. Default keys are <code>deployer_username</code> &amp; <code>deployer_password</code> these are usually your username and password for connecting Providentia and your hypervisor. When trying to deploy to cloud environments like AWS, Azure. etc. Catapult will tell you what secrets are missing and need to be added the the Vault.</p>"},{"location":"catapult/20-how-to-use.html#enter-the-catapult","title":"Enter the Catapult","text":"<ul> <li>Start the Catapult container if it does not exist and connect to it, if the container is running it'll just connect to it:</li> </ul> <pre><code>make start\n</code></pre> <ul> <li>Remove &gt; Create &gt; Start the Catapult container and connect to it:</li> </ul> <pre><code>make restart\n</code></pre>"},{"location":"catapult/20-how-to-use.html#projects","title":"Projects","text":"<p>Catapult is designed to work with multiple projects. Each project has its own inventory, roles, and variables. The project is selected when the user enters the Catapult container. The project is selected based on the presence of the <code>.git</code> folder in the <code>/srv/inventories</code> project directory subfolder. If there is only one project the command will select it automatically.</p> <p>Use Catapult Project Example for a basic setup to get you started.</p>"},{"location":"catapult/20-how-to-use.html#tips-and-tricks","title":"Tips and tricks","text":"<ul> <li>Use tab completion to get the list of available commands. For example, type <code>ctp</code> and press tab to get the list of available commands.</li> <li>Use <code>Ctrl + R</code> to search through the command history and find the command you have used before. Fuzzy search is enabled so you can type parts of the commands or separate words that must be contained in the command.</li> <li>Use arrow up after you have started typing the command to get the previous command that starts the same way. For example, if you have used <code>ctp host deploy</code> before you can use arrow up to get the previous <code>ctp host deploy</code> commands.</li> </ul>"},{"location":"catapult/20-how-to-use.html#general-commands","title":"General commands","text":""},{"location":"catapult/20-how-to-use.html#ctp-secrets-edit","title":"ctp secrets edit","text":"<ul> <li>Open your Ansible Vault for editing your personal secrets. When saving the Vault the syntax will be checked and the Vault will be re-encrypted.</li> </ul> <pre><code>ctp secrets edit\n</code></pre>"},{"location":"catapult/20-how-to-use.html#ctp-secrets-change-password","title":"ctp secrets change-password","text":"<ul> <li>Change the password for your existing Ansible Vault file.</li> </ul> <pre><code>ctp secrets change-password\n</code></pre>"},{"location":"catapult/20-how-to-use.html#ctp-project-select","title":"ctp project select","text":"<ul> <li>Lists all available projects under /srv/inventories and allows you to select one if there is only one project the command will select it automatically. The command looks for projects that contain <code>.git</code> folder. If you are not using git for your project you can create an empty <code>.git</code> folder to make the project selectable.</li> </ul> <pre><code>ctp project select\n</code></pre>"},{"location":"catapult/20-how-to-use.html#ctp-project-update-inventory","title":"ctp project update-inventory","text":"<ul> <li>Updates the tab-completable inventory cache.</li> </ul> <pre><code>ctp project update-inventory\n</code></pre>"},{"location":"catapult/20-how-to-use.html#host-commands","title":"Host commands","text":"<p>Examples for the commands that are run against the inventory_hostname or group in Ansible. These commands usually interact with the target OS and the hypervisor. Use Ansible's documentation for Advanced deploy patterns</p>"},{"location":"catapult/20-how-to-use.html#ctp-host-list","title":"ctp host list","text":"<p>List the inventory_hostnames for the given project, group_var or just to check if the inventory_hostname is valid. This command is useful to use a a pre-check before running any of the other commands. You can make sure that your advanced regex is correct and you don't run the command on the wrong inventory_hostname.</p> <p>Example usage:</p> <ul> <li>Checks if the inventory_hostnames exists</li> </ul> <pre><code>ctp host list &lt;inventory_hostname&gt;\n</code></pre> <ul> <li>Lists all of the inventory_hostnames for the given project</li> </ul> <pre><code>ctp host list all\n</code></pre> <ul> <li>Lists all of the inventory_hostnames for the given group_var</li> </ul> <pre><code>ctp host list &lt;group_var&gt;\n</code></pre>"},{"location":"catapult/20-how-to-use.html#ctp-host-vars","title":"ctp host vars","text":"<p>List (most) of the variables for the given inventory_hostname. This command is useful to check what variables are available in the given inventory_hostname. It is not a complete list of all the variables because of home some <code>host_vars</code> get loaded but it's useful when getting started with the role development.</p> <p>Example usage:</p> <ul> <li>Lists the variables for the given inventory_hostname</li> </ul> <pre><code>ctp host vars &lt;inventory_hostname&gt;\n</code></pre>"},{"location":"catapult/20-how-to-use.html#ctp-host-ip","title":"ctp host ip","text":"<p>Getting the IP's and FQDN of the VM. Based on the hypervisor or cloud provider and the project the command will look up the IP from the inventory variables or the machine itself. In the latter case the machine needs to be up and running.</p> <p>Example usage:</p> <ul> <li>Gets the IP's and FQDN of the VM for the given inventory_hostname</li> </ul> <pre><code>ctp host ip &lt;inventory_hostname&gt;\n</code></pre>"},{"location":"catapult/20-how-to-use.html#ctp-host-deploy","title":"ctp host deploy","text":"<p>Run the full playbook and creates the VM if it doesn't exist</p> <p>Example usage:</p> <ul> <li>Deploys the VM with the given inventory_hostname</li> </ul> <pre><code>ctp host deploy &lt;inventory_hostname&gt;\n</code></pre>"},{"location":"catapult/20-how-to-use.html#ctp-host-redeploy","title":"ctp host redeploy","text":"<p>Destroys the existing VM and runs the the <code>ctp host deploy</code> command</p> <p>Example usage:</p> <ul> <li>Redeploys the VM with the given inventory_hostname</li> </ul> <pre><code>ctp host redeploy &lt;inventory_hostname&gt;\n</code></pre>"},{"location":"catapult/20-how-to-use.html#ctp-host-deploy-until-configuration","title":"ctp host deploy-until-configuration","text":"<p>Deploys the machine, stops the play after os_configuration role and creates a snapshot. This is a useful command if you want to create a snapshot of the VM after the OS is installed and configured. You can then use the snapshot to speed up the deployment/development process. You can deploy multiple machines that depend on each other in parallel and use the <code>ctp host deploy-from-configuration</code> to configure them in the correct order afterwards.</p> <p>Example usage:</p> <ul> <li>Deploys the VM with the given inventory_hostname and creates a snapshot</li> </ul> <pre><code>ctp host deploy-until-configuration &lt;inventory_hostname&gt;\n</code></pre>"},{"location":"catapult/20-how-to-use.html#ctp-host-redeploy-until-configuration","title":"ctp host redeploy-until-configuration","text":"<p>Redeploys the machine, stops the play after os_configuration role and creates a snapshot. This is a useful command if you want to create a snapshot of the VM after the OS is installed and configured. You can then use the snapshot to speed up the deployment/development process. You can deploy multiple machines that depend on each other in parallel and use the <code>ctp host deploy-from-configuration</code> to configure them in the correct order afterwards.</p> <p>Example usage:</p> <ul> <li>Redeploys the VM with the given inventory_hostname and creates a snapshot</li> </ul> <pre><code>ctp host redeploy-until-configuration &lt;inventory_hostname&gt;\n</code></pre>"},{"location":"catapult/20-how-to-use.html#ctp-host-deploy-from-configuration","title":"ctp host deploy-from-configuration","text":"<p>Starts the play from <code>/srv/&lt;project_name&gt;/pre_vm_role part</code> of the playbook and runs until the end. This is a useful command during mass deploy when you have run the <code>ctp host deploy-until-configuration</code> first and then you want to configure the cloned machines. Should anything go wrong you can always revert to the snapshot and start again.</p> <p>Example usage:</p> <ul> <li>Starts configuring the VM with the given inventory_hostname from the pre_vm_role.</li> </ul> <pre><code>ctp host deploy-from-configuration &lt;inventory_hostname&gt;\n</code></pre>"},{"location":"catapult/20-how-to-use.html#ctp-host-deploy-role","title":"ctp host deploy-role","text":"<p>Runs only the <code>/srv/&lt;project_name&gt;/vm/&lt;role_name&gt;</code> part of the playbook and then stops. This is a useful during role developing and or when you want to minimize the time it takes to configure something.</p> <p>Example usage:</p> <ul> <li>Only runs the role for inventory_hostname and then stops the play can also be used against all or group_var</li> </ul> <pre><code>ctp host deploy-role &lt;inventory_hostname&gt;\n</code></pre>"},{"location":"catapult/20-how-to-use.html#ctp-host-deploy-single-role","title":"ctp host deploy-single-role","text":"<p>Runs only the role defined as the first parameter and then stops. The role <code>role path or FQCN</code> is tab-completable based on installed collections and roles in the project. This is a useful command when you want to run a specific role for a given inventory_hostname (or group) and then stop the play.</p> <p>Example usage:</p> <ul> <li>Run a specific role for a given inventory_hostname (or group) and the stops play</li> </ul> <pre><code>ctp host deploy-single-role &lt;role path or FQCN&gt; &lt;inventory_hostname&gt;\n</code></pre>"},{"location":"catapult/20-how-to-use.html#ctp-host-deploy-pre-role","title":"ctp host deploy-pre-role","text":"<p>Runs only the pre_role defined as the first parameter and then stops. The role <code>role path or FQCN</code> is tab-completable based on installed collections and roles in the project. This is a useful command when you want to run a specific role for a given inventory_hostname (or group) and then stop the play. The difference between <code>ctp host deploy-single-role</code> and <code>ctp host deploy-pre-role</code> is that the <code>ctp host deploy-pre-role</code> the the pre_role never connects to the target machine and runs the role from localhost. This is useful when interacting with the hypervisor, cloud provider or APIs.</p> <p>Example usage:</p> <ul> <li>Run a specific role for a given inventory_hostname (or group) and the stops play</li> </ul> <pre><code>ctp host deploy-pre-role &lt;role path or FQCN&gt; &lt;inventory_hostname&gt;\n</code></pre>"},{"location":"catapult/20-how-to-use.html#ctp-host-deploy-network","title":"ctp host deploy-network","text":"<p>Runs ctp host deploy and also includes networks configuration role</p> <p>Example usage:</p> <ul> <li>Deploys the VM with the given inventory_hostname and also configures the networks</li> </ul> <pre><code>ctp host deploy-network &lt;inventory_hostname&gt;\n</code></pre>"},{"location":"catapult/20-how-to-use.html#ctp-host-deploy-fresh","title":"ctp host deploy-fresh","text":"<p>Runs deploy as if the machine does not exist. This can be useful when deploy has failed before configuring accounts. Use this command to deploy the machine again as if it didn't exist and thus use the default values for the accounts.</p> <p>Example usage:</p> <ul> <li>Deploys the VM with the given inventory_hostname as if it didn't exist</li> </ul> <pre><code>ctp host deploy-fresh &lt;inventory_hostname&gt;\n</code></pre>"},{"location":"catapult/20-how-to-use.html#ctp-host-remove","title":"ctp host remove","text":"<p>Destroys the existing VM</p> <p>Example usage:</p> <ul> <li>Destroys the VM with the given inventory_hostname</li> </ul> <pre><code>ctp host remove &lt;inventory_hostname&gt;\n</code></pre>"},{"location":"catapult/20-how-to-use.html#ctp-host-rebuild-linode-vm","title":"ctp host rebuild-linode-vm","text":"<p>Rebuilds the existing Linode VM with a new disk but keeps the existing IP</p> <p>Example usage:</p> <ul> <li>Rebuilds the VM with the given inventory_hostname</li> </ul> <pre><code>ctp host rebuild-linode-vm &lt;inventory_hostname&gt;\n</code></pre>"},{"location":"catapult/20-how-to-use.html#ctp-host-update","title":"ctp host update","text":"<p>Runs only the <code>nova.core.updates</code> role on the given targets. Useful for only updating the OS packages.</p> <p>Example usage:</p> <ul> <li>Updates the OS packages for the given inventory_hostname</li> </ul> <pre><code>ctp host update &lt;inventory_hostname&gt;\n</code></pre>"},{"location":"catapult/20-how-to-use.html#ctp-host-connect","title":"ctp host connect","text":"<p>Finds the IP and user credentials for a an inventory_hostname and connects to the machine using SSH.</p> <p>Example usage:</p> <ul> <li>Connect to given inventory_hostname over SSH from the Catapult container</li> </ul> <pre><code>ctp host connect &lt;inventory_hostname&gt;\n</code></pre>"},{"location":"catapult/20-how-to-use.html#ctp-host-console","title":"ctp host console","text":"<p>Enters Ansible console for a given inventory_hostname. This is useful when you want to run ad-hoc commands on the machine or debug variables.</p> <p>Example usage:</p> <ul> <li>Enters Ansible console for the given inventory_hostname</li> </ul> <pre><code>ctp host console &lt;inventory_hostname&gt;\n</code></pre>"},{"location":"catapult/20-how-to-use.html#deploy-commands-based-on-playbookretry-file","title":"Deploy commands based on @playbook.retry file","text":"<p>Whenever a deploy fails a playbook.retry file is created under <code>/srv/inventories/&lt;project_name&gt;/playbook.retry</code>. Instead of going trough the logs to find what machines failed you can use the following commands to deploy only the failed machines. Keep in mind that only that latest fail is written into the playbook.retry file so when running multiple instances of Catapult (using <code>make shell</code> multiple times) and multiple deploys in parallel the latest fail will be written into the playbook.retry file.</p> <ul> <li>Runs <code>ctp host deploy</code> on failed machines based on playbook.retry file</li> </ul> <pre><code>ctp retry deploy\n</code></pre> <ul> <li>Runs <code>ctp host redeploy</code> failed machines based on playbook.retry file</li> </ul> <pre><code>ctp retry redeploy\n</code></pre> <ul> <li>Runs <code>ctp host deploy-until-configuration</code> on failed machines based on playbook.retry file</li> </ul> <pre><code>ctp retry deploy-until-configuration\n</code></pre> <ul> <li>Runs <code>ctp host redeploy-until-configuration</code> on failed machines based on playbook.retry file</li> </ul> <pre><code>ctp retry redeploy-until-configuration\n</code></pre> <ul> <li>Runs <code>ctp host deploy-from-configuration</code> on failed machines based on playbook.retry file</li> </ul> <pre><code>ctp retry deploy-from-configuration\n</code></pre> <ul> <li>Runs <code>ctp host deploy-role</code> on failed machines based on playbook.retry file</li> </ul> <pre><code>ctp retry deploy-role\n</code></pre>"},{"location":"catapult/20-how-to-use.html#vm-commands","title":"VM commands","text":"<p>These commands will be used to manage the VMs from the hypervisor or cloud provider.</p>"},{"location":"catapult/20-how-to-use.html#ctp-vm-rename","title":"ctp vm rename","text":"<p>Renaming VM. This command is useful when the naming scheme for the VMs has changed and you want to rename some or all of them for the project.</p> <p>Example usage:</p> <ul> <li>Renames the VM for the given inventory_hostname with the given values</li> </ul> <pre><code>ctp vm rename &lt;inventory_hostname&gt; -e old_vm_name=&lt;old_name&gt; -e new_vm_name=&lt;new_name&gt;\n</code></pre> <ul> <li>Renames the VM for the given inventory_hostname where the old name is the current value defined in the group or host vars</li> </ul> <pre><code>ctp vm rename &lt;inventory_hostname&gt; -e new_vm_name=&lt;new_name&gt;\n</code></pre>"},{"location":"catapult/20-how-to-use.html#ctp-vm-snapshot-create","title":"ctp vm snapshot-create","text":"<p>Shuts down the VM, creates a snapshot and powers the VM back on.</p> <p>Example usage:</p> <ul> <li>Creates a snapshot of the VM for the given inventory_hostname with the default snapshot name</li> </ul> <pre><code>ctp vm snapshot-create &lt;inventory_hostname&gt;\n</code></pre> <ul> <li>Creates a snapshot of the VM for the given inventory_hostname with the given snapshot name</li> </ul> <pre><code>ctp vm snapshot-create &lt;inventory_hostname&gt; -e snapshot_name=&lt;snapshot_name&gt;\n</code></pre>"},{"location":"catapult/20-how-to-use.html#ctp-vm-snapshot-create-clean","title":"ctp vm snapshot-create-clean","text":"<p>Remove all existing snapshots and create a new snapshot of the VM</p> <p>Example usage:</p> <ul> <li>Removes all existing snapshots and creates a new snapshot of the VM for the given inventory_hostname</li> </ul> <pre><code>ctp vm snapshot-create-clean &lt;inventory_hostname&gt;\n</code></pre> <ul> <li>Removes all existing snapshots and creates a new snapshot of the VM for the given inventory_hostname with the given snapshot name</li> </ul> <pre><code>ctp vm snapshot-create-clean &lt;inventory_hostname&gt; -e snapshot_name=&lt;snapshot_name&gt;\n</code></pre>"},{"location":"catapult/20-how-to-use.html#ctp-vm-snapshot-live","title":"ctp vm snapshot-live","text":"<p>Creates a snapshot of a running machine including memory, mostly applicable to VMware products</p> <p>Example usage:</p> <ul> <li>Creates a live snapshot of the VM for the given inventory_hostname</li> </ul> <pre><code>ctp vm snapshot-create-live &lt;inventory_hostname&gt;\n</code></pre> <ul> <li>Creates a live snapshot of the VM for the given inventory_hostname with the given snapshot name</li> </ul> <pre><code>ctp vm snapshot-create-live &lt;inventory_hostname&gt; -e snapshot_name=&lt;snapshot_name&gt;\n</code></pre>"},{"location":"catapult/20-how-to-use.html#ctp-vm-snapshot-revert","title":"ctp vm snapshot-revert","text":"<p>Revert to the latest default snapshot or to the given snapshot name</p> <p>Example usage:</p> <ul> <li>Reverts the VM for the given inventory_hostname to the latest default snapshot</li> </ul> <pre><code>ctp vm snapshot-revert &lt;inventory_hostname&gt;\n</code></pre> <ul> <li>Reverts the VM for the given inventory_hostname to the given snapshot name</li> </ul> <pre><code>ctp vm snapshot-revert &lt;inventory_hostname&gt; -e snapshot_name=&lt;snapshot_name&gt;\n\n</code></pre>"},{"location":"catapult/20-how-to-use.html#ctp-vm-snapshot-remove","title":"ctp vm snapshot-remove","text":"<p>Removing snapshot, requires <code>-e snapshot_name=snapshot_name_to_remove</code> or removes current snapshot if snapshot_name is not defined</p> <p>Example usage:</p> <ul> <li>Removes the snapshot for the given inventory_hostname</li> </ul> <pre><code>ctp vm snapshot-remove &lt;inventory_hostname&gt; -e snapshot_name=snapshot_name_to_remove\n</code></pre>"},{"location":"catapult/20-how-to-use.html#ctp-vm-snapshot-remove-all","title":"ctp vm snapshot-remove-all","text":"<ul> <li>Removes all snapshots for the given inventory_hostname</li> </ul> <pre><code>ctp vm snapshot-remove-all &lt;inventory_hostname&gt;\n</code></pre>"},{"location":"catapult/20-how-to-use.html#ctp-vm-snapshot-rename","title":"ctp vm snapshot-rename","text":"<p>Renaming snapshot, requires <code>-e snapshot_name=existing_snapshot_name_to_rename -e new_snapshot_name=new_snapshot_name</code></p> <p>Example usage:</p> <ul> <li>Renames the snapshot for given inventory_hostname machine</li> </ul> <pre><code>ctp vm snapshot-rename &lt;inventory_hostname&gt; -e snapshot_name=existing_snapshot_name_to_rename -e new_snapshot_name=new_snapshot_name\n</code></pre> <p>Refer to the nova.core.snapshots role for more command line options.</p>"},{"location":"catapult/20-how-to-use.html#ctp-vm-poweron","title":"ctp vm poweron","text":"<p>Power on VM</p> <p>Example usage:</p> <pre><code>ctp vm poweron &lt;inventory_hostname&gt;\n</code></pre>"},{"location":"catapult/20-how-to-use.html#ctp-vm-restart","title":"ctp vm restart","text":"<p>Restart VM</p> <p>Example usage:</p> <pre><code>ctp vm restart &lt;inventory_hostname&gt;\n</code></pre>"},{"location":"catapult/20-how-to-use.html#ctp-vm-shutdown","title":"ctp vm shutdown","text":"<p>Shut down VM (graceful shutdown)</p> <p>Example usage:</p> <pre><code>ctp vm shutdown &lt;inventory_hostname&gt;\n</code></pre>"},{"location":"catapult/20-how-to-use.html#ctp-vm-poweroff","title":"ctp vm poweroff","text":"<p>Power off VM (ungraceful shutdown)</p> <p>Example usage:</p> <pre><code>ctp vm poweroff &lt;inventory_hostname&gt;\n</code></pre>"},{"location":"catapult/20-how-to-use.html#ctp-vm-reset","title":"ctp vm reset","text":"<p>Reset VM (very ungraceful)</p> <p>Example usage:</p> <pre><code>ctp vm reset &lt;inventory_hostname&gt;\n</code></pre>"},{"location":"catapult/20-how-to-use.html#ctp-vm-suspend","title":"ctp vm suspend","text":"<p>Suspend VM</p> <p>Example usage:</p> <pre><code>ctp vm suspend &lt;inventory_hostname&gt;\n</code></pre>"},{"location":"catapult/20-how-to-use.html#update-commands","title":"Update commands","text":"<p>These commands will be used to manually check and update for Catapult components. These are mostly useful for people who are modifying or developing Catapult. For most users the <code>make restart</code> command is enough to restart, check and update the Catapult container and components.</p>"},{"location":"catapult/20-how-to-use.html#reinstall-default-collections","title":"reinstall-default-collections","text":"<p>Reinstall the default collections that come with Catapult. This is useful when you have made changes to the collections and you want to revert them back to the default state.</p> <p>Example usage:</p> <pre><code>ctp update reinstall-default-collections\n</code></pre>"},{"location":"catapult/20-how-to-use.html#update-nova","title":"update-nova","text":"<p>Update the <code>nova.core</code> collection to the latest version. This is useful when you want to update the <code>nova.core</code> collection to the latest version without restarting the Catapult container.</p> <p>Example usage:</p> <pre><code>ctp update update-nova\n</code></pre>"},{"location":"catapult/20-how-to-use.html#update-venv","title":"update-venv","text":"<p>Update the Python virtual environment to the latest version. This is useful when you want to update the Python virtual environment to the latest version without restarting the Catapult container.</p>"},{"location":"catapult/20-how-to-use.html#development-commands","title":"Development commands","text":"<p>These commands are useful when developing or debugging Catapult.</p>"},{"location":"catapult/20-how-to-use.html#enable-timing","title":"enable-timing","text":"<p>Enables timing for the Ansible playbook. This is useful when you want to see how long each task takes to run.</p> <p>Example usage:</p> <pre><code>ctp dev enable-timing\n</code></pre>"},{"location":"catapult/20-how-to-use.html#disable-timing","title":"disable-timing","text":"<p>Disables timing for the Ansible playbook. This is useful when you want to disable the timing for the Ansible playbook.</p> <p>Example usage:</p> <pre><code>ctp dev disable-timing\n</code></pre>"},{"location":"catapult/30-how-to-personalize.html","title":"How to Personalization","text":"<p>There several ways to personalize Catapult:</p>"},{"location":"catapult/30-how-to-personalize.html#personal-docker-compose-file","title":"Personal Docker Compose file","text":"<p><code>personal/docker-compose-personal.yml</code> - This file is used to add to, or override the default configuration values defined in <code>defaults/docker-compose.yml</code>. It can be used to add custom volumes, environment variables, or other settings that are specific to the user.</p> <p>Potential use cases for this file include:</p> <ul> <li>Mounting custom shell rc files (currently only .zshrc supported)</li> <li>Adding extra environmental variables to override default Ansible values that come from <code>ansible.cfg</code></li> <li>Mounting custom files into the container</li> </ul>"},{"location":"catapult/30-how-to-personalize.html#personal-aliases-file","title":"Personal aliases file","text":"<p><code>personal/.personal_aliases</code> - This file is used to add custom shell aliases features etc.</p> <p>Potential use cases for this file include:</p> <ul> <li>Adding custom aliases that are not available in the defaults</li> <li>Adding aliases that are specific to the user</li> <li>Adding specific functions that are not available in the defaults</li> </ul>"},{"location":"catapult/30-how-to-personalize.html#personal-makefile-configuration","title":"Personal makefile configuration","text":"<p><code>personal/.makerc-personal</code> - This file is used to add custom makefile variables that are specific to the user. Refer to the <code>.makerc-vars</code> file for available options.</p> <p>Potential use cases for this file include:</p> <ul> <li>Adding custom make commands that are specific to the user</li> </ul>"},{"location":"catapult/30-how-to-personalize.html#personal-cli-commands","title":"Personal CLI commands","text":"<p><code>personal/autocomplete.yml</code> - This file is used to add custom autocomplete commands for <code>ctp</code> that are specific to the user. Refer to the default autocomplete.yml as an example</p>"},{"location":"catapult/30-how-to-personalize.html#personal-entrypoint-scripts","title":"Personal entrypoint scripts","text":"<p><code>personal/docker-entrypoints</code> - Contains custom docker-entrypoint scripts that will run inside the container during <code>make start</code>. Refer to default entrypoint scripts for examples. The scripts are divided into two folders: <code>first-run</code> and <code>every-run</code>:</p> <ul> <li><code>first-run</code> - Contains scripts that will run only once when the container is started for the first time.</li> <li><code>every-run</code> - Contains scripts that will run every time the container is started. Useful for an example when setting up the environment variables for each user session.</li> </ul> <p>:::info <code>docker-entrypoints</code> only supports <code>*.sh</code> files that get sourced by <code>zsh</code> shell. :::</p>"},{"location":"catapult/40-how-to-customize.html","title":"How to customize","text":"<p>To customize Catapult for your team or organization, a separate git project needs to be created that contains all of the required files. Then users need to be pointed that project using the <code>MAKEVAR_CATAPULT_CUSTOMIZER_REPO</code> variable in their <code>personal/.makerc-personal</code> file. Use the Catapult Customizer repo as an example.</p> <p>The structure of the customization repo is as follows:</p>"},{"location":"catapult/40-how-to-customize.html#folders","title":"Folders","text":"<ul> <li> <p><code>certificates</code> - Contains the trusted certificate files that will be installed into the container. The certificate format must be base64 and the file name format must be .crt <li> <p><code>container</code> - Contains .custom_aliases file that will be copied into the container. Refer to the .default_aliases file as an example on how to create .custom_aliases.</p> </li> <li> <p><code>docker</code> - Contains custom <code>docker-compose-custom.yml</code> to add extra environment variables/volumes/etc to the container. Refer to the default docker-compose-custom.yml &amp; docker-compose.yml for examples.</p> </li> <li> <p><code>docker-entrypoints</code> - Contains custom docker-entrypoint scripts that will run inside the container during <code>make start</code>. Refer to default entrypoint scripts for examples. The scripts are divided into two folders: <code>first-run</code> and <code>every-run</code>:</p> </li> <li><code>first-run</code> - Contains scripts that will run only once when the container is started for the first time.</li> <li><code>every-run</code> - Contains scripts that will run every time the container is started. Useful for an example when setting up the environment variables for each user session.</li> <p><code>docker-entrypoints</code> only supports <code>*.sh</code> files that get sourced by <code>zsh</code> shell.</p> <ul> <li> <p><code>makefiles</code> - Contains custom .makerc* files specific to your organization or project. Refer to the default .makerc file for examples and the Makefile for different types of makefiles that get loaded if they exists.</p> </li> <li> <p><code>scripts</code> - Contains custom scripts that can be used with the project. For example with <code>make</code> commands</p> </li> <li> <p><code>start-tasks</code> - Contains scripts that will be run on the host during container startup. Refer to existing start-tasks for examples.</p> </li> </ul>"},{"location":"catapult/40-how-to-customize.html#files","title":"Files","text":"<ul> <li> <p><code>start.yml</code> - In some rare cases you might want to customize the deployment tree of Catapult. For that you can create your own start.yml file and it will be used instead of the default one. Refer to the default start.yml as an example.</p> </li> <li> <p><code>autocomplete.yml</code> - Contains custom completion commands that can be used with the <code>ctp</code> command in the container. Refer to the default autocomplete.yml as an example.</p> </li> </ul>"},{"location":"catapult/50-template-requirements.html","title":"VM Template Requirements","text":"<p>When using Catapult with a cloud provider you can just use the VM templates provided by the cloud provider. When using Catapult in your own private cloud you need to make sure that the VM templates your create are compatible with Catapult.</p> <p>One great tool for template generation is Packer. Packer can be used to create base images for all major cloud providers and also for local virtualization solutions like VirtualBox or VMWare. We recommend using Packer for creating base images for yourself and then using Catapult to create per-environment/project/datacenter etc. templates based on the base images. Alternatively you can just install the base templates manually.</p>"},{"location":"catapult/50-template-requirements.html#base-template-requirements","title":"Base template requirements","text":"<p>However you install your base templates make sure that they meet the following requirements. These configurations need to be present for initial configuration to the VMs to work. After the initial configuration is done you can change these configurations to whatever you want.</p>"},{"location":"catapult/50-template-requirements.html#windows","title":"Windows","text":"<ul> <li> <p>Latest stable OpenSSH installed and running -- Catapult does all of its work over SSH. Don't use the built-in Windows SSH server it's versions are different per OS version and you will start getting random connection errors.</p> </li> <li> <p><code>MaxAuthTries</code> set to <code>20</code> in <code>C:/ProgramData/ssh/sshd_config</code> -- A lot of users will have more than 6 keys in their SSH agent and the default <code>MaxAuthTries</code> of 6 will cause Catapult to fail to connect to the VM. The value must not be 20 but it most likely must be higher than 6.</p> </li> <li> <p>(Optional) Chocolatey installed -- It's not a hard requirement but it's really useful to have Chocolatey installed on your Windows VMs. Catapult can use Chocolatey to install the required software on the VMs. Chocolatey can also be used to install the OpenSSH server on the base template with <code>choco install openssh -params /SSHServerFeature -y</code></p> </li> </ul>"},{"location":"catapult/50-template-requirements.html#linux","title":"Linux","text":"<ul> <li> <p>SSH server installed and running -- Catapult does all of its work over SSH.</p> </li> <li> <p><code>MaxAuthTries</code> set to <code>20</code> in <code>/etc/ssh/sshd_config</code> -- Same as with Windows.</p> </li> <li> <p><code>PermitRootLogin</code> set to <code>yes</code> in <code>/etc/ssh/sshd_config</code> -- Catapult needs to be able to login as root to the VMs the first time. After that Catapult can be used to create new accounts and disable root login.</p> </li> <li> <p><code>PasswordAuthentication</code> set to <code>yes</code> in <code>/etc/ssh/sshd_config</code> -- It is usually set to yes for most Linux distributions but it's good to check.</p> </li> <li> <p><code>sudo</code> package needs to be installed for your distribution.</p> </li> <li> <p><code>python3</code> package needs to be installed for your distribution.</p> </li> <li> <p><code>open-vm-tools/qemu agent/etc.</code> package might need to be installed for your distribution depending on your virtualization platform.</p> </li> </ul>"},{"location":"catapult/50-template-requirements.html#per-environmentprojectdatacenter-etc-template-requirements","title":"Per-environment/project/datacenter etc. template requirements","text":"<p>We recommend applying the template_os_configuration to the specific project templates. It contains some prerequisites for different <code>nova.core</code> roles that you might otherwise need to install before using those roles.</p>"},{"location":"catapult/91-generate-ssh-keypair.html","title":"Generate SSH keys","text":"<p>Catapult works by mounting your host ssh agent into the container. This means that you need to have your ssh keys in your host ssh agent. Here is a good guide on how to generate SSH keys and add them to your ssh agent.</p>"},{"location":"catapult/92-contributing.html","title":"Contributing guidelines","text":"<p>When seeking to contribute to this project, please keep the following in mind:</p> <ul> <li> <p>When something is is not working as expected and you don't know how to fix it, please open an issue. The project(s) are under active development and we might miss something but will try to fix all of the issues we are aware of.</p> </li> <li> <p>When you see something that could be improved and you know how to do it you can create fork of the project, make the required changes and create a pull request. We might not accept all pull requests, or we might ask you to make some changes before we do. This is not a reflection on you as a developer, but rather a reflection on the direction of the project. If you are unsure about whether or not to make a pull request, you can always open an issue first and ask.</p> </li> <li> <p>When committing Ansible code make sure to lint it with ansible-lint before committing. This will help us to keep the code clean and consistent. Use the ansible-lint.yml as the configuration file.</p> </li> <li> <p>When committing code, please make it in small, logical chunks. This makes it easier for us to review and accept your changes. Also make sure that your commit messages (titles) are clear and concise. Commit messages (titles) will also be used to automatically generate an understandable changelog when releasing new versions of the project.</p> </li> </ul> <p>The commit messages (titles) must contain the following three components:</p> <ul> <li>What was changed</li> <li>Where it was changes</li> <li>Why it was changed (when applicable)</li> </ul> <p>Examples:</p> <ul> <li> <p>Updated the default Ansible version in requirements file.</p> </li> <li> <p>Updated the docker-entrypoint.sh script to avoid race condition for certificate updates.</p> </li> </ul>"},{"location":"catapult-customizer/index.html","title":"Catapult Customizer Example","text":"<p>This is an example to Customize Catapult for your organization or team needs. Read the Customization section in the documentation for more information.</p> <p>DELETE ALL CUSTOMIZATION FOLDER AND FILE EXAMPLES THAT YOU WILL NOT BE USING - Otherwise empty folder and files will be included overriding the default files.</p>"},{"location":"nova-core-collection/accounts.html","title":"accounts","text":"<p>This role is responsible for managing admin and user accounts for different operating systems. Currently, this role supports the following operating systems:</p> <ul> <li>CentOS/RHEL</li> <li>Cisco IOS</li> <li>FreeBSD</li> <li>MacOS</li> <li>Opnsense</li> <li>Palo Alto Networks PAN-OS</li> <li>PfSense</li> <li>RouterOS</li> <li>Ubuntu/Debian</li> <li>VyOS</li> <li>Windows (Domain &amp; Local accounts)</li> </ul>"},{"location":"nova-core-collection/accounts.html#requirements","title":"Requirements","text":"<p>For most Unix based distributions <code>sudo</code> needs to be pre-installed.</p>"},{"location":"nova-core-collection/accounts.html#role-variables","title":"Role Variables","text":"<p>Refer to the defaults/main.yml file for a list and description of the variables used in this role.</p>"},{"location":"nova-core-collection/accounts.html#dependencies","title":"Dependencies","text":"<p>none</p>"},{"location":"nova-core-collection/accounts.html#example","title":"Example","text":"<pre><code># Define the admin accounts list in host_vars/group_vars or role variables to create the admin accounts for the OS\nadmin_accounts:\n  - username: root # When password is not defined it'll be randomly generated\n\n  - username: admin\n    password: Password123\n    ssh_key: ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIB8J\n\n  - username: admin1\n    password: Password123\n    ssh_key: ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIB8J\n    update_password: on_create # This will update the password only when the account is created\n\n  - username: admin2\n    ssh_key: ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIB8J\n    save_password_to_vault: false # This will not save a random generated the password to the vault, ssh key is needed for authentication then\n</code></pre> <pre><code># Define the user accounts list in host_vars/group_vars or role variables to create the user accounts for the OS\nuser_accounts:\n  - username: user1 # When password is not defined it'll be randomly generated\n\n  - username: user2\n    password: Password123\n    ssh_key: ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIB8J\n</code></pre> <pre><code># Define the domain_user_accounts accounts list in host_vars/group_vars or role variables to create the domain user accounts for the Domain Controller\ndomain_user_accounts:\n  - username: user1 # When password is not defined it'll be randomly generated\n\n  - username: user2\n    password: Password123\n</code></pre>"},{"location":"nova-core-collection/caddy.html","title":"caddy","text":"<p>This is a role for installing and configuering Caddy web server.</p>"},{"location":"nova-core-collection/caddy.html#requirements","title":"Requirements","text":"<p>none</p>"},{"location":"nova-core-collection/caddy.html#role-variables","title":"Role Variables","text":"<p>Refer to the defaults/main.yml file for a list and description of the variables used in this role.</p>"},{"location":"nova-core-collection/caddy.html#dependencies","title":"Dependencies","text":"<ul> <li>Depends on Docker and Docker Compose being installed on the host. Docker can be installed using the nova.core.docker role.</li> </ul>"},{"location":"nova-core-collection/caddy.html#example","title":"Example","text":"<pre><code># Installing Caddy server that listens on all addresses and reverse proxies to an internal server\n- name: Installing Caddy...\n  ansible.builtin.include_role:\n    name: nova.core.caddy\n  vars:\n    caddy_servers:\n    - caddy_server_name: web.example.com # Name of the server\n        caddy_server_listen_addresses:\n        - \":\"\n        caddy_server_reverse_proxy_to_address: http://internal.example.com\n</code></pre> <pre><code># Installing Caddy server that listens only on port 80 with TLS disabled and reverse proxies to an internal server\n- name: Installing Caddy...\n  ansible.builtin.include_role:\n    name: nova.core.caddy\n  vars:\n    caddy_servers:\n      - caddy_server_name: web.example.com # Name of the server\n        caddy_server_listen_addresses:\n          - \":80\"\n        caddy_server_reverse_proxy_to_address: http://internal.example.com\n        caddy_use_tls: false\n</code></pre> <pre><code># Installing Caddy server that listens only on all ports with TLS enabled and reverse proxies to an internal server\n# Only responds to requests for www.example.com and www2.example.com\n- name: Installing Caddy...\n  ansible.builtin.include_role:\n    name: nova.core.caddy\n  vars:\n    caddy_servers:\n      - caddy_server_name: www.example.com # Name of the server\n        caddy_server_listen_addresses:\n          - www.example.com\n          - www2.example.com\n        caddy_server_reverse_proxy_to_address: http://internal.example.com\n</code></pre> <pre><code># Installing Caddy server that has no configuration but API enabled from localhost for further configuration\n- name: Installing Caddy...\n  ansible.builtin.include_role:\n    name: nova.core.caddy\n  vars:\n    caddy_enable_api: true\n</code></pre> <pre><code># Installing Caddy server that has no configuration but API enabled from everywhere for further configuration\n# Careful with this, as it allows anyone to access the Caddy API. The API port should be protected by a firewall.\n- name: Installing Caddy...\n  ansible.builtin.include_role:\n    name: nova.core.caddy\n  vars:\n    caddy_enable_api: true\n    caddy_api_from_localhost_only: false\n</code></pre>"},{"location":"nova-core-collection/cleanup.html","title":"cleanup","text":"<p>This role is used to run OS cleanup tasks on a system as one of the final steps in a playbook. It's mostly used for Lab and Exercise environments where you don't want to leave any traces of the Ansible playbook behind for the students or participants to see.</p>"},{"location":"nova-core-collection/cleanup.html#requirements","title":"Requirements","text":"<p>none</p>"},{"location":"nova-core-collection/cleanup.html#role-variables","title":"Role Variables","text":"<p>Refer to the defaults/main.yml file for a list and description of the variables used in this role.</p> <p>The <code>cleanup</code> role can be included in start.yml playbook by the <code>finalize</code> role. If <code>finalize_cleanup_system: true</code> is set in host or group vars, the cleanup role will be executed at the end of the playbook.</p>"},{"location":"nova-core-collection/cleanup.html#dependencies","title":"Dependencies","text":"<p>none</p>"},{"location":"nova-core-collection/cleanup.html#example","title":"Example","text":"<pre><code>- name: Including cleanup role...\n  ansible.builtin.include_role:\n    name: nova.core.cleanup\n</code></pre>"},{"location":"nova-core-collection/configure_networking.html","title":"configure_networking","text":"<p>This is a role to configure networking for a VM after cloning. Currently it is only supporting network configuration for VMs deployed on VMware vSphere, but the scripts are more or less universal and can be modified to add support to different hypervisors. Here is a list of all supported network methods.</p>"},{"location":"nova-core-collection/configure_networking.html#requirements","title":"Requirements","text":"<p>None</p>"},{"location":"nova-core-collection/configure_networking.html#role-variables","title":"Role Variables","text":"<p>The variable structure is based on Providentia API output. When using file based inventory then make sure to follow the same structure. Check the example blow for more details.</p> <p>The variable <code>customization_method</code> can take: <code>bsd</code>, <code>macos</code>, <code>netplan</code>, <code>networkd</code>, <code>nmcli</code>, <code>routeros</code>, <code>vyos</code>, <code>windows_cli</code></p> <p>When selecting the network configuration method via the variable <code>customization_method</code>, if you are selecting <code>networkd</code> option, an extra variable is needed because this option can be used with different OS: <code>customization_method_distribution</code>. Possible options: <code>Debian</code>, <code>Archlinux</code>, <code>Scientific</code></p> <p>Refer to defaults/main.yml for the full list of variables.</p> <p><code>extra_routes</code> - Can be set to add extra routes per interfaces. Supported only for <code>netplan</code></p> <pre><code># Example on how to configure extra routes when netplaN interface is named vpn\nextra_routes:\n  vpn:\n    - to: 10.0.0.0/8\n      via: 10.0.0.1\n</code></pre> <p><code>extra_ipv4</code> - Can be set to add extra IPv4 addresses per interfaces <code>extra_ipv6</code> - Can be set to add extra IPv6 addresses per interfaces</p> <pre><code># Example on how to configure extra IPv4 addresses when interface is named vpn\nextra_ipv4:\n  vpn:\n    - 10.0.0.10/24\n    - 10.0.0.11/24\n    - 10.0.0.12/24\n\nextra_ipv6:\n  vpn:\n    - fd00:1234:5678:abcd::1234/64\n    - fd00:1234:5678:abcd::1235/64\n    - fd00:1234:5678:abcd::1236/64\n</code></pre>"},{"location":"nova-core-collection/configure_networking.html#dependencies","title":"Dependencies","text":"<p>None</p>"},{"location":"nova-core-collection/configure_networking.html#example","title":"Example","text":"<p>When not using Providentia define the the network configuration in host/group/etc vars in the following format:</p> <pre><code># Example on how to configure single network interface with static IPv4 and IPv6 addresses and an extra IPv6 address for management traffic\n# You can remove the addresses you don't need\n# Any undefined value leave to null to avoid errors\ninterfaces:\n  - network_id: my-network-name # Some type of identifiable name. It'll be used for an example in netplan and nmcli interface name\n    cloud_id: my-cloud-name # This is a vSphere portgroup name\n    domain: my.domain.com\n    fqdn: my-host.my.domain.com # FQDN of the VM where the network will be configured\n    egress: true # Whether the network is used for egress traffic (connecting to the internet)\n    connection: true # Whether the network is used for management traffic (connecting over ssh)\n    addresses:\n      - pool_id: default-ipv4 # IP pool name\n        mode: ipv4_static # IP address mode leave as it is\n        connection: false # Whether this IP address is used for management traffic\n        address: 192.168.0.0/24 # IP address and subnet mask\n        dns_enabled: true # Whether this IP will be registered in DNS (Requires some type of DNS integration)\n        gateway: 192.168.0.1 # Gateway IP address\n\n      - pool_id: default-ipv6 # IP pool name\n        mode: ipv6_static # IP address mode leave as it is\n        connection: false # Whether this IP address is used for management traffic\n        address: 2001:0db8:85a3:0000:0000:8a2e:0370:7334/64 # IP address and prefix\n        dns_enabled: true # Whether this IP will be registered in DNS (Requires some type of DNS integration)\n        gateway: 2001:0db8:85a3:0000:0000:8a2e:0370:7331 # Gateway IP address\n\n      - pool_id: mgmt-ipv6 # IP pool name make sure it contains mgmt\n        mode: ipv6_static # IP address mode leave as it is\n        connection: true # Whether this IP address is used for management traffic\n        address: fd00:1234:5678:abcd::1234/64 # IP address and prefix\n        dns_enabled: false # Whether this IP will be registered in DNS (Requires some type of DNS integration)\n        gateway: null # Gateway IP address\n</code></pre>"},{"location":"nova-core-collection/configure_package_mirrors.html","title":"configure_package_mirrors","text":"<p>This role is used to configure package mirrors for Linux apt repos or Windows Chocolatey package manager.</p>"},{"location":"nova-core-collection/configure_package_mirrors.html#requirements","title":"Requirements","text":""},{"location":"nova-core-collection/configure_package_mirrors.html#windows","title":"Windows","text":"<p>Chocolatey must be installed on the machine.</p>"},{"location":"nova-core-collection/configure_package_mirrors.html#linux","title":"Linux","text":"<p>none</p>"},{"location":"nova-core-collection/configure_package_mirrors.html#role-variables","title":"Role Variables","text":"<p>Refer to the defaults/main.yml file for a list and description of the variables used in this role.</p>"},{"location":"nova-core-collection/configure_package_mirrors.html#dependencies","title":"Dependencies","text":"<p>none</p>"},{"location":"nova-core-collection/configure_package_mirrors.html#example","title":"Example","text":"<pre><code>- name: Configuring package mirrors for Kali or Ubuntu...\n  ansible.builtin.include_role:\n    name: nova.core.configure_package_mirrors\n</code></pre> <pre><code>- name: Configuring package mirrors for Chocolatey...\n  ansible.builtin.include_role:\n    name: nova.core.configure_package_mirrors\n  vars:\n    package_mirror_chocolatey_sources_list:\n      - package_mirror_chocolatey_source_name: choco-mirror\n        package_mirror_chocolatey_source_state: present\n        package_mirror_chocolatey_source: https://nexus.example.com/repository/choco-mirror/\n        package_mirror_chocolatey_source_priority: 1\n</code></pre> <pre><code>- name: Configuring package mirrors for Chocolatey with authentication...\n  ansible.builtin.include_role:\n    name: nova.core.configure_package_mirrors\n  vars:\n    package_mirror_chocolatey_sources_list:\n      - package_mirror_chocolatey_source_name: choco-mirror\n        package_mirror_chocolatey_source_state: present\n        package_mirror_chocolatey_source: https://nexus.example.com/repository/choco-mirror/\n        package_mirror_chocolatey_source_priority: 1\n        package_mirror_chocolatey_username: admin\n        package_mirror_chocolatey_password: password\n</code></pre> <pre><code>- name: Configuring package mirrors for Ubuntu...\n  ansible.builtin.include_role:\n    name: nova.core.configure_package_mirrors\n  vars:\n    package_mirror_ubuntu_uri:\n      general: \"https://nexus.example.com/repository/{{ ansible_facts.lsb.codename }}/\"\n      updates: \"https://nexus.example.com/repository/{{ ansible_facts.lsb.codename }}-updates/\"\n      security: \"https://nexus.example.com/repository/{{ ansible_facts.lsb.codename }}-security/\"\n      backports: \"https://nexus.example.com/repository/{{ ansible_facts.lsb.codename }}-backports/\"\n</code></pre>"},{"location":"nova-core-collection/connect.html","title":"connect","text":"<p>This role saves the connection information for the inventory_hostname and that info can be used to connect th the machine over supported protocols:</p> <ul> <li>SSH</li> </ul>"},{"location":"nova-core-collection/connect.html#requirements","title":"Requirements","text":"<p>none</p>"},{"location":"nova-core-collection/connect.html#role-variables","title":"Role Variables","text":"<p>Refer to defaults/main.yml for the full list of variables.</p>"},{"location":"nova-core-collection/connect.html#dependencies","title":"Dependencies","text":"<p>none</p>"},{"location":"nova-core-collection/connect.html#example","title":"Example","text":"<p>Manually after including the role:</p> <pre><code>ssh $(cat /tmp/ansible_connect)\n</code></pre> <p>Or with Catapult:</p> <pre><code>ctp host connect &lt;TAB&gt;\n</code></pre>"},{"location":"nova-core-collection/connection.html","title":"connection","text":"<p>This role is used to set connection parameters for the VM after cloning. It parses the correct parameters based on if the VM was just cloned or if it is already been customized. This role can also be used to connect to an already exiting virtual or physical machine. All of the connections are made over SSH.</p>"},{"location":"nova-core-collection/connection.html#requirements","title":"Requirements","text":"<p>Credentials for the VM to connect to. This can be either a username and password or a username and SSH key. The VM must also be configured to allow SSH connections.</p>"},{"location":"nova-core-collection/connection.html#role-variables","title":"Role Variables","text":"<p><code>template_username</code> - The username to connect the freshly cloned machine to run post-configuration there. Usually root or Administrator. <code>template_password</code> - The password to connect the freshly cloned machine to run post-configuration there. Usually root or Administrator. <code>connection_address</code> - The IP address of the machine to connect to.</p> <p><code>ansible_deployer_username</code> - The username to connect to the machine with once the post-configuration is complete. Usually something that gets created in the <code>nova.core.accounts</code> role. <code>ansible_deployer_password</code> - The password to connect to the machine with once the post-configuration is complete. Usually something that gets created in the <code>nova.core.accounts</code> role.</p>"},{"location":"nova-core-collection/connection.html#dependencies","title":"Dependencies","text":"<p>none</p>"},{"location":"nova-core-collection/connection.html#example","title":"Example","text":"<p>Since this role already gets included in <code>start.yml</code> there is no need to include it in your playbook. However, if you want to run it separately, you can do so with:</p> <pre><code>- name: Including connection role\n  include_role:\n    name: nova.core.connection\n</code></pre>"},{"location":"nova-core-collection/customization.html","title":"customization","text":"<p>This is a universal role that can be included in start.yml. It is used to look for existence of a role in the <code>customization_role_path</code> and include it if it exists.</p>"},{"location":"nova-core-collection/customization.html#requirements","title":"Requirements","text":"<p>none</p>"},{"location":"nova-core-collection/customization.html#role-variables","title":"Role Variables","text":"<p>Refer to defaults/main.yml for the full list of variables.</p>"},{"location":"nova-core-collection/customization.html#dependencies","title":"Dependencies","text":"<p>none</p>"},{"location":"nova-core-collection/customization.html#example","title":"Example","text":"<p>Since this role already gets included in <code>start.yml</code> there is no need to include it in your playbook. However, if you want to run it separately, you can do so with:</p> <pre><code>- name: Including customization role\n  include_role:\n    name: nova.core.customization\n</code></pre>"},{"location":"nova-core-collection/customization_post_vm_role.html","title":"customization_post_vm_role","text":"<p>This role is used run extra post-customization tasks on a system once the <code>customization</code> role has been finished. It's useful for running additional tasks for a specific group of systems that need to be customized in a specific way. It can be used to include extra roles and tasks and use <code>when:</code> statements to run them only on specific systems.</p>"},{"location":"nova-core-collection/customization_post_vm_role.html#requirements","title":"Requirements","text":"<p>none</p>"},{"location":"nova-core-collection/customization_post_vm_role.html#role-variables","title":"Role Variables","text":"<p>Refer to the defaults/main.yml file for a list and description of the variables used in this role.</p>"},{"location":"nova-core-collection/customization_post_vm_role.html#dependencies","title":"Dependencies","text":"<p>none</p>"},{"location":"nova-core-collection/customization_post_vm_role.html#example-playbook","title":"Example Playbook","text":"<p>Define a <code>post_vm_role</code> role in under your project's <code>customization_post_vm_role_path</code> directory defined in this role defaults and the post_vm_role will be picked up by the <code>start.yml</code> playbook automatically.</p>"},{"location":"nova-core-collection/customization_pre_role.html","title":"customization_pre_role","text":"<p>This role gets loaded in <code>start.yml</code> before any connection is made to the Ansible inventory host. It can be used include roles that interact with different services or APIs directly from the Catapult container. It'll first check if a role name matching <code>pre_role</code> variable exists in <code>roles</code> and includes it. If no role exits it'll try to include the role based on the FQCN defined in <code>pre_role</code> variable. After the include role is complete the play stops.</p>"},{"location":"nova-core-collection/customization_pre_role.html#requirements","title":"Requirements","text":"<p><code>pre_role</code> variable must be defined</p>"},{"location":"nova-core-collection/customization_pre_role.html#role-variables","title":"Role Variables","text":"<p><code>pre_role</code> - role name in <code>roles</code> folder or role FQCN to be included.</p>"},{"location":"nova-core-collection/customization_pre_role.html#dependencies","title":"Dependencies","text":"<p>None</p>"},{"location":"nova-core-collection/customization_pre_role.html#example","title":"Example","text":"<p>Example on how the <code>pre_role</code> can be used to build snapshot aliases for Catapult</p>"},{"location":"nova-core-collection/customization_pre_role.html#license","title":"License","text":"<p>AGPL-3.0-or-later</p>"},{"location":"nova-core-collection/customization_pre_vm_role.html","title":"customization_pre_vm_role","text":"<p>This role is used run extra pre-customization tasks on a system before the <code>customization</code> role has been started. It's useful for running additional tasks for a specific group of systems that need to be customized in a specific way. It can be used to include extra roles and tasks and use <code>when:</code> statements to run them only on specific systems.</p>"},{"location":"nova-core-collection/customization_pre_vm_role.html#requirements","title":"Requirements","text":"<p>none</p>"},{"location":"nova-core-collection/customization_pre_vm_role.html#role-variables","title":"Role Variables","text":"<p>Refer to the defaults/main.yml file for a list and description of the variables used in this role.</p>"},{"location":"nova-core-collection/customization_pre_vm_role.html#dependencies","title":"Dependencies","text":"<p>none</p>"},{"location":"nova-core-collection/customization_pre_vm_role.html#example-playbook","title":"Example Playbook","text":"<p>Define a <code>pre_vm_role</code> role in under your project's <code>customization_pre_vm_role_path</code> directory defined in this role defaults and the pre_vm_role will be picked up by the <code>start.yml</code> playbook automatically.</p>"},{"location":"nova-core-collection/customization_single_role.html","title":"customization_single_role","text":"<p>This is a role to include and run a single Ansible role. The role name can be in the for of path/to/role or the FQCN of the role.</p>"},{"location":"nova-core-collection/customization_single_role.html#requirements","title":"Requirements","text":"<p>none</p>"},{"location":"nova-core-collection/customization_single_role.html#role-variables","title":"Role Variables","text":"<p><code>single_role</code> variable is required to be set to the name of the role you want to include and run.</p>"},{"location":"nova-core-collection/customization_single_role.html#dependencies","title":"Dependencies","text":"<p>none</p>"},{"location":"nova-core-collection/customization_single_role.html#example","title":"Example","text":"<p>Include and run the <code>nova.core.updates</code> from command line by appending the cli variable to your playbook command:</p> <pre><code>ansible-playbook -i inventory playbook.yml -e single_role=nova.core.updates\n</code></pre>"},{"location":"nova-core-collection/deploy_vars.html","title":"deploy_vars","text":"<p>This role is used to set required deploy variables. Is is used as the very first role in the deploy process. By using this role, we can ensure that all required variables are set before any other roles are executed. This role also caches the required variables in a file so that they can be used by other roles.</p>"},{"location":"nova-core-collection/deploy_vars.html#requirements","title":"Requirements","text":"<p>none</p>"},{"location":"nova-core-collection/deploy_vars.html#role-variables","title":"Role Variables","text":"<p>Refer to the defaults/main.yml file for a list and description of the variables used in this role.</p>"},{"location":"nova-core-collection/deploy_vars.html#dependencies","title":"Dependencies","text":"<p>none</p>"},{"location":"nova-core-collection/deploy_vars.html#example","title":"Example","text":"<pre><code>- name: Including deploy_vars role...\n  ansible.builtin.include_role:\n    name: nova.core.deploy_vars\n</code></pre>"},{"location":"nova-core-collection/docker.html","title":"docker","text":"<p>This role installs Docker and Docker Compose on the target machine. By default it also configures IPv6 support for Docker and a default network with IPv6 support.</p>"},{"location":"nova-core-collection/docker.html#requirements","title":"Requirements","text":"<p>none</p>"},{"location":"nova-core-collection/docker.html#role-variables","title":"Role Variables","text":"<p>Refer to the defaults/main.yml file for a list of variables and their default values.</p>"},{"location":"nova-core-collection/docker.html#dependencies","title":"Dependencies","text":"<p>none</p>"},{"location":"nova-core-collection/docker.html#example","title":"Example","text":"<pre><code>- name: Including docker role...\n  ansible.builtin.include_role:\n    name: nova.core.docker\n</code></pre>"},{"location":"nova-core-collection/expo.html","title":"expo","text":"<p>This role is used to deploy Exercise Portal (EXPO) to a VM.</p>"},{"location":"nova-core-collection/expo.html#requirements","title":"Requirements","text":"<p>Certificates, which are defined in the defaults.</p>"},{"location":"nova-core-collection/expo.html#role-variables","title":"Role Variables","text":"<p>See defaults/main.yml for the full list of variables.</p>"},{"location":"nova-core-collection/expo.html#dependencies","title":"Dependencies","text":"<ul> <li>Depends on Docker and Docker Compose being installed on the host. Docker can be installed using the nova.core.docker role.</li> </ul>"},{"location":"nova-core-collection/expo.html#example","title":"Example","text":"<pre><code>- name: Including connection role\n  include_role:\n    name: nova.core.expo\n</code></pre>"},{"location":"nova-core-collection/finalize.html","title":"finalize","text":"<p>This role is usually used as a last role in a playbook. It is used to clean up some of the artifacts that are created during the deployment process. It can also be used to updates the operating system and include some extra last-stop roles.</p>"},{"location":"nova-core-collection/finalize.html#requirements","title":"Requirements","text":"<p>none</p>"},{"location":"nova-core-collection/finalize.html#role-variables","title":"Role Variables","text":"<p>Refer to defaults/main.yml for the full list of variables, their default values and descriptions.</p>"},{"location":"nova-core-collection/finalize.html#dependencies","title":"Dependencies","text":"<p>none</p>"},{"location":"nova-core-collection/finalize.html#example","title":"Example","text":"<pre><code>- name: Including finalize role to update Operating System...\n  ansible.builtin.include_role:\n    name: nova.core.finalize\n  vars:\n    update_system: true\n</code></pre>"},{"location":"nova-core-collection/firewall.html","title":"firewall","text":"<p>This role is used to install nftables or iptables and template the corresponding configuration for it.</p>"},{"location":"nova-core-collection/firewall.html#requirements","title":"Requirements","text":"<p>Based on the selected mode needs iptables or nftables configuration files to be present in the <code>templates</code> directory of the role that includes the firewall role. For the configuration path variables Refer to defaults/main.yml</p>"},{"location":"nova-core-collection/firewall.html#role-variables","title":"Role Variables","text":"<p>Refer to defaults/main.yml for the full list of variables, their default values and descriptions.</p>"},{"location":"nova-core-collection/firewall.html#dependencies","title":"Dependencies","text":"<p>none</p>"},{"location":"nova-core-collection/firewall.html#example","title":"Example","text":"<pre><code>- name: Including firewall role installing nftables and templating config...\n  ansible.builtin.include_role:\n    name: nova.core.firewall\n\n- name: Including firewall role installing iptables and templating config......\n  ansible.builtin.include_role:\n    name: nova.core.firewall\n  vars:\n    mode: iptables\n</code></pre>"},{"location":"nova-core-collection/gather_facts.html","title":"gather_facts","text":"<p>This role is used to gather facts about the target being managed. A separate role is used to better filter between different OS types and their gather facts modules. Also so this role can be dynamically included in other roles.</p>"},{"location":"nova-core-collection/gather_facts.html#requirements","title":"Requirements","text":"<p>none</p>"},{"location":"nova-core-collection/gather_facts.html#role-variables","title":"Role Variables","text":"<p>none</p>"},{"location":"nova-core-collection/gather_facts.html#dependencies","title":"Dependencies","text":"<p>none</p>"},{"location":"nova-core-collection/gather_facts.html#example","title":"Example","text":"<pre><code># Gathering facts for any OS supported by this collection\n- name: Including gather_facts role...\n  ansible.builtin.include_role:\n    name: nova.core.gather_facts\n</code></pre>"},{"location":"nova-core-collection/get_ip.html","title":"get_ip","text":"<p>This role will look up the IP addresses (IPv4 &amp; IPv6) and FQDN of an Ansible inventory host and print them out.</p>"},{"location":"nova-core-collection/get_ip.html#requirements","title":"Requirements","text":"<p>None</p>"},{"location":"nova-core-collection/get_ip.html#role-variables","title":"Role Variables","text":"<p>None</p>"},{"location":"nova-core-collection/get_ip.html#dependencies","title":"Dependencies","text":"<p>None</p>"},{"location":"nova-core-collection/get_ip.html#example","title":"Example","text":"<pre><code># Include the role\n- name: Get IP address of host\n  ansible.builtin.include_role:\n    name: nova.core.get_ip\n</code></pre> <pre><code># Include the role in meta\n---\n- dependencies:\n    - role: nova.core.get_ip\n</code></pre> <pre><code># Use the command in Catapult\nctp host ip &lt;inventory_hostname&gt;\n</code></pre>"},{"location":"nova-core-collection/get_ip.html#license","title":"License","text":"<p>AGPL-3.0-or-later</p>"},{"location":"nova-core-collection/gitlab.html","title":"Gitlab","text":"<p>This role installs and configures Gitlab with Docker Compose. https://docs.gitlab.com/ Optionally it can also configure:</p> <ul> <li>LDAP authentication</li> <li>SMTP service</li> <li>Gitlab Pages</li> <li>Gitlab Registry</li> </ul>"},{"location":"nova-core-collection/gitlab.html#requirements","title":"Requirements","text":"<ul> <li>Tested on Ubuntu 22.04 but should work on any Debian based system.</li> <li>Requires an external reverse proxy (nginx, traefik, haproxy, caddy etc.) in front of Gitlab to handle GUI access and TLS termination.</li> </ul>"},{"location":"nova-core-collection/gitlab.html#role-variables","title":"Role Variables","text":"<p>Refer to <code>defaults/main.yml</code> for the minimal needed variables to install a clean gitlab instance, their default values and descriptions.</p>"},{"location":"nova-core-collection/gitlab.html#required-variables-for-installation","title":"Required Variables for Installation","text":"<ul> <li><code>fqdn</code></li> <li><code>gitlab_docker_network</code></li> <li><code>gitlab_initial_root_personal_passwd</code></li> <li><code>gitlab_root_personal_token</code></li> </ul>"},{"location":"nova-core-collection/gitlab.html#example","title":"Example","text":"<p>Including the gitlab role will install gitlab and apply some general instance wide settings.</p> <pre><code># Installs Gitlab\n- name: Installing Gitlab...\n  ansible.builtin.include_role:\n    name: nova.core.gitlab\n</code></pre>"},{"location":"nova-core-collection/gitlab.html#to-further-configure-gitlab-groups-users-projects-etc","title":"To further configure gitlab, groups, users, projects etc","text":"<p>Include extra tasks by referring to them in your vm role, for example, include <code>mnt-groups.yml</code> tasks to create groups in your gitlab.</p> <pre><code>- name: Include tasks from gitlab role..\n  ansible.builtin.include_role:\n    name: nova.core.gitlab\n    tasks_from: mnt-groups.yml\n</code></pre>"},{"location":"nova-core-collection/gitlab.html#useful-links","title":"Useful links","text":"<p>https://www.unavco.org/gitlab/help/administration/troubleshooting/gitlab_rails_cheat_sheet.md https://docs.gitlab.com/ee/api/</p>"},{"location":"nova-core-collection/gitlab_runner.html","title":"gitlab_runner","text":"<ul> <li>Docker exec runners, installed on linux (docker needs to be installed beforehand).</li> <li>PowerShell runners, installed on windows.</li> </ul>"},{"location":"nova-core-collection/gitlab_runner.html#registration-now-uses-authentication-tokens","title":"Registration now uses authentication tokens","text":"<p>Introduced in GitLab 15.10, runner registration flow is now moving towards authentication tokens only, previously used registration tokens will be deprecated in Gitlab 18.x.</p> <p>This means you need acquire an access token from gitlab, before installing and registering new gitlab-runners.</p> <p>Define your auth token in a runner specific <code>auth_token</code> variable.</p> <pre><code>gitlab_runner_docker_runners:\n  - name: docker_01\n    auth_token: glrt-TOKEN\n    privileged: false\n    executor_image: ubuntu:22.04\n</code></pre>"},{"location":"nova-core-collection/gitlab_runner.html#usage","title":"Usage","text":"<p>The minimal set of variables to install and register your runner.</p> <ul> <li> <p><code>gitlab_inventory_hostname</code> or <code>gitlab_runner_gitlab_url</code> to define which gitlab will the runner register itself. Can be set globally, or separate in the named runner definition, as <code>gitlab_url</code></p> </li> <li> <p><code>gitlab_runner_version</code> is defined in defaults, can override separately with <code>gitlab_runner_docker_version_tag</code> or <code>gitlab_runner_windows_runner_version</code></p> </li> </ul> <p>An example of a Docker-in-Docker runner for builing container images.</p> <pre><code>gitlab_runner_docker_runners:\n  - name: dind_01\n    auth_token: glrt-TOKEN\n    privileged: false\n    services_privileged: true\n    extra_hosts:\n      - \"{{ gitlab_runner_gitlab_fqdn }}:{{ hostvars[gitlab_inventory_hostname].egress_nic_ipv4 }}\"\n      - \"gitlab-registry.{{ domain }}:{{ hostvars[gitlab_inventory_hostname].egress_nic_ipv4 }}\"\n    allowed_privileged_services:\n      - docker.io/library/docker:*-dind\n      - docker.io/library/docker:dind\n      - docker:*-dind\n      - docker:dind\n    executor_image: docker:git\n    executor_volumes:\n      - /certs/client ## needed for dind\n      - /var/lib/docker ## for docker image cache on the dind service container\n      - /cache\n      - /etc/ssl/certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt:ro\n</code></pre>"},{"location":"nova-core-collection/gitlab_runner.html#_1","title":"gitlab_runner","text":"<p>Tags, locked, paused, run_untagged etc runner options are no longer set through gitlab-runner registration, and are now configured only in Gitlab.</p>"},{"location":"nova-core-collection/join_domain.html","title":"join_domain","text":"<p>This is a role for:</p> <ul> <li>Adding Windows and Linux hosts to Active Directory (AD) domains.</li> <li>Fixing broken AD domain joins and re-joining machines to domain.</li> </ul>"},{"location":"nova-core-collection/join_domain.html#requirements","title":"Requirements","text":"<p>Required an Active Directory domain controller to be installed and available.</p>"},{"location":"nova-core-collection/join_domain.html#role-variables","title":"Role Variables","text":""},{"location":"nova-core-collection/join_domain.html#required-variables","title":"Required Variables","text":"<ul> <li><code>domain</code> - Points to the AD domain name that matches your environments DNS domain.</li> <li><code>ad_domain_name</code> - Points to the AD domain name if it does NOT match your environments DNS domain.</li> <li><code>domain_admin_username</code> - Username of an account that has privileges to join computers to the domain and create/delete computer objects.</li> <li><code>domain_admin_password</code> - Password of the domain_admin_username.</li> </ul> <p>One special variable not defined in defaults is <code>computer_ou</code>. This variable is used to specify the OU where the computer object should be created. If this variable is not defined, the computer object will be created in the default Computers container.</p> <p>Refer to the defaults/main.yml file for a list of variables and their default values.</p>"},{"location":"nova-core-collection/join_domain.html#dependencies","title":"Dependencies","text":"<p>none</p>"},{"location":"nova-core-collection/join_domain.html#example","title":"Example","text":"<pre><code>- name: Joining domain\n  ansible.builtin.include_role:\n    name: nova.core.join_domain\n\n- name: Joining domain with custom values\n  ansible.builtin.include_role:\n    name: nova.core.join_domain\n  vars:\n    domain: example.com\n    computer_ou: OU=Computers,DC=example,DC=com\n\n- name: Joining domain with custom values and credentials\n  ansible.builtin.include_role:\n    name: nova.core.join_domain\n  vars:\n    domain: example.com\n    computer_ou: OU=Computers,DC=example,DC=com\n    domain_join_user: domain_join_user # This is just the username. The domain name will be appended by the role.\n    domain_join_password: domain_join_password\n</code></pre>"},{"location":"nova-core-collection/keycloak.html","title":"keycloak","text":"<p>This is a role for installing and configuring Keycloak Docker based on a target machine.</p>"},{"location":"nova-core-collection/keycloak.html#requirements","title":"Requirements","text":"<ul> <li>Pre installed certificates under the <code>/srv/certs</code> directory for using TLS.</li> <li>Pre installed web server for reverse proxying, <code>nova.core.caddy</code> can be used for this purpose.</li> </ul>"},{"location":"nova-core-collection/keycloak.html#role-variables","title":"Role Variables","text":"<p>Refer to the defaults/main.yml file for a list and description of the variables used in this role.</p>"},{"location":"nova-core-collection/keycloak.html#dependencies","title":"Dependencies","text":"<ul> <li><code>nova.core.docker</code></li> </ul>"},{"location":"nova-core-collection/keycloak.html#example","title":"Example","text":"<pre><code># Example on how to install Keycloak with Providentia client and LDAPs (AD) group mapper\ndependencies:\n  - role: nova.core.keycloak\n    vars:\n      keycloak_use_custom_jks: false # Set to true if using internal CA that is not trusted by Keycloak by default\n      keycloak_realms:\n        - realm_name: Apps\n          sso_session_idle_timeout: 172800 ## 2 days\n          sso_session_max_lifespan: 604800 ## 7 days\n          configure_ldap: yes\n          ldap_server: ldaps://dc1.example.com\n          users_search_dn: OU=Users,DC=example,DC=com\n          bind_user_dn: CN=keycloak.service.account,OU=Service Accounts,DC=example,DC=com\n          bind_user_password: Password123\n          custom_user_search_filter:\n            - \"(&amp;(objectClass=person)(mail=*))\"\n\n          ldap_role_mappers:\n            - client_name: Providentia\n              ldap_groups_dn: OU=Groups,DC=example,DC=com\n\n          clients:\n            - client_name: Providentia\n              admin_uri: https://providentia.example.com\n              base_uri: https://providentia.example.com\n              redirect_uris:\n                - https://providentia.example.com/*\n              root_uri: https://providentia.example.com\n              weborigin_uris:\n                - https://providentia.example.com/*\n              create_client_scope: yes\n</code></pre>"},{"location":"nova-core-collection/linux_xrdp_keyboard.html","title":"linux_xrdp_keyboard","text":"<p>This role is used to add extra keyboard layouts to the xrdp server. It's useful for adding keyboard layouts that are not included in the default xrdp installation.</p>"},{"location":"nova-core-collection/linux_xrdp_keyboard.html#requirements","title":"Requirements","text":"<p>XRDP must already be installed on the system. It can be done with the <code>linux_xrdp_server</code> role.</p>"},{"location":"nova-core-collection/linux_xrdp_keyboard.html#role-variables","title":"Role Variables","text":"<p>none</p>"},{"location":"nova-core-collection/linux_xrdp_keyboard.html#dependencies","title":"Dependencies","text":"<p>none</p>"},{"location":"nova-core-collection/linux_xrdp_keyboard.html#example","title":"Example","text":"<pre><code>- name: Including linux_xrdp_keyboard role...\n  ansible.builtin.include_role:\n    name: nova.core.linux_xrdp_keyboard\n</code></pre>"},{"location":"nova-core-collection/linux_xrdp_server.html","title":"linux_xrdp_server","text":"<p>This roles installs and configures xrdp on a Linux machine.</p>"},{"location":"nova-core-collection/linux_xrdp_server.html#requirements","title":"Requirements","text":"<p>none</p>"},{"location":"nova-core-collection/linux_xrdp_server.html#role-variables","title":"Role Variables","text":"<p>All required role variables are coming from gather_facts.</p>"},{"location":"nova-core-collection/linux_xrdp_server.html#dependencies","title":"Dependencies","text":"<p>none</p>"},{"location":"nova-core-collection/linux_xrdp_server.html#example","title":"Example","text":"<pre><code>- name: Inlcude role linux_xrdp_server\n  ansible.builtin.include_role:\n    name: nova.core.linux_xrdp_server\n</code></pre>"},{"location":"nova-core-collection/machine_operations.html","title":"machine_operations","text":"<p>This role is used to create Virtual Machines in different environments. Currently supported environments are:</p> <ul> <li>AWS</li> <li>Linode</li> <li>VMware vSphere</li> <li>VMWare Workstation</li> <li>Proxmox</li> </ul>"},{"location":"nova-core-collection/machine_operations.html#requirements","title":"Requirements","text":"<p>none</p>"},{"location":"nova-core-collection/machine_operations.html#role-variables","title":"Role Variables","text":"<p>Refer to the defaults/main.yml file for a list of variables and their default values.</p> <p>A required variable is <code>infra_env</code> this will tell the playbook which environment to create the VM in. Available options are:</p> <ul> <li>aws</li> <li>linode</li> <li>vmware</li> <li>vmware_workstation</li> <li>proxmox</li> <li>external (Skip the VM creation and move on to connection task)</li> </ul>"},{"location":"nova-core-collection/machine_operations.html#dependencies","title":"Dependencies","text":"<p>none</p>"},{"location":"nova-core-collection/machine_operations.html#example","title":"Example","text":"<p>This role already get's included by the <code>start.yml</code> playbook and does not need to be included separately.</p>"},{"location":"nova-core-collection/monolith.html","title":"monolith","text":"<p>This is a role for combining multiple roles into a single role for installing and configuring a monolithic application on a target machine. This role combines the following roles:</p> <ul> <li><code>nova.core.caddy</code></li> <li><code>nova.core.vault</code></li> <li><code>nova.core.keycloak</code></li> <li><code>nova.core.providentia</code></li> <li><code>nova.core.nexus</code></li> </ul> <p>It's meant for easy deployment of all required services for running a Cyber Exercise. The role generates and writes it's application default credentials into Vault. The login token for the Vault can be found at <code>/srv/vault/creds/root_token</code>.</p>"},{"location":"nova-core-collection/monolith.html#requirements","title":"Requirements","text":"<ul> <li>Pre existing/installed and configured Active Directory (AD) server for LDAPs.</li> <li>Pre installed Debian based OS (Ubuntu 22.04 preferred) with SSH &amp; sudo access where the application will be installed if not pre-existing infrastructure is present.</li> <li>TLS certificate for all services under the <code>/srv/certs/{{ fqdn }}_fullchain.crt</code> must be pre-installed. Alternatively, the <code>nova.core.caddy</code> role will generate self-signed certificates.</li> <li>The DNS names defined in <code>monolith_*</code> variables must be resolvable from the host where this role is executed from.</li> </ul>"},{"location":"nova-core-collection/monolith.html#role-variables","title":"Role Variables","text":"<p>These variables need to be defined in the host_var or passed from command line in order to connect and configure the previously cloned host where the monolith will be installed.</p> <pre><code>infra_env: external # This says that the host where monolith is manually set up and not cloned by nova.core.machine_operations rol\nsave_secrets_to_vault: false # By default  not saving secrets to vault because we're setting it up in this run\n\n# This is list of internal CA certificates will trusted by the monolith services for an example for LDAPS.\n# Remove this list if globally trusted CA certificates are used also for LDAPs.\ntrusted_certificates_list:\n  - name: LDAPS\n    src: \"{{ playbook_dir }}/files/LDAPS.crt\"\n\nconnection_address: 10.10.10.10 # This is the IP address of the host where monolith will be installed\nansible_deployer_username: # This is the username that will be used to connect to the host\nansible_deployer_password: # This is the password that will be used to connect to the host\nhostname: # This is the hostname that will be set for the host\ndomain: # This is the domain that will be set for the host\nad_domain_name: \"{{ domain }}\"\nfqdn: \"{{ hostname }}.{{ domain }}\"\nproject_fullname: # This is the full name of the project\n</code></pre> <p>Although there are some variables available to this role, it recommended to only set values for variables defined in the example below. This is a kickstart role and should be used as such. Advanced users can install the individual roles separately for more control.</p> <p><code>-e monolith_single_service=service_name</code> can be appended to command line to only configure single service after the initial setup.</p>"},{"location":"nova-core-collection/monolith.html#dependencies","title":"Dependencies","text":"<p>none</p>"},{"location":"nova-core-collection/monolith.html#example","title":"Example","text":"<pre><code># Example on how to install and configure all monolith services when using LetsEncrypt (or other globally trusted CA) certificates\ndependencies:\n  - role: nova.core.trusted_certificates # This will created a JKS file from the trusted certificates.\n    vars:\n      trusted_certificates_to_jks: true\n\n  - role: nova.core.monolith\n    vars:\n      monolith_providentia_fqdn: providentia.{{ domain }} # This is the FQDN that will be used for Providentia\n      monolith_nexus_fqdn: nexus.{{ domain }} # This is the FQDN that will be used for Nexus\n      monolith_keycloak_fqdn: keycloak.{{ domain }} # This is the FQDN that will be used for Keycloak\n      monolith_vault_fqdn: vault.{{ domain }} # This is the FQDN that will be used for Vault\n\n      ############\n      # Keycloak #\n      ############\n\n      keycloak_use_custom_jks: false # Set to true if using internal CA that is not trusted by Keycloak by default\n      keycloak_realms:\n        - realm_name: Apps\n          sso_session_idle_timeout: 172800 ## 2 days\n          sso_session_max_lifespan: 604800 ## 7 days\n          configure_ldap: yes\n          ldap_server: ldaps://dc1.example.com # This is the LDAP server that will be used for Keycloak\n          users_search_dn: OU=Users,DC=example,DC=com # This is the search base for users in LDAP\n          bind_user_dn: CN=keycloak.service.account,OU=Service Accounts,DC=example,DC=com # This is the bind user for LDAP\n          bind_user_password: Password123 # This is the password for the bind user\n          custom_user_search_filter:\n            - \"(&amp;(objectClass=person)(mail=*))\" # This is the custom user search filter for LDAP that makes sure only users with email are imported\n\n          ldap_role_mappers:\n            - client_name: Providentia # This is the client name that will be used for LDAP role mapping\n              ldap_groups_dn: OU=Groups,DC=example,DC=com # This is the search base for groups in LDAP\n\n          clients:\n            - client_name: Providentia\n              admin_uri: https://{{ monolith_providentia_fqdn }}\n              base_uri: https://{{ monolith_providentia_fqdn }}\n              redirect_uris:\n                - https://{{ monolith_providentia_fqdn }}/*\n              root_uri: https://{{ monolith_providentia_fqdn }}\n              weborigin_uris:\n                - https://{{ monolith_providentia_fqdn }}/*\n              create_client_scope: yes\n\n      ###############\n      # Providentia #\n      ###############\n\n      providentia_app_fqdn: \"{{ monolith_providentia_fqdn }}\"\n      providentia_resource_prefix: providentia- # This is the resource prefix that will be used for Providentia, all LDAP groups must start with this prefix. For logging into Providentia, the user must be a member of a providentia-Admin group.\n\n      #########\n      # Vault #\n      #########\n\n      vault_proxy_container_name: caddy\n      vault_binddn: CN=vault.service.account,OU=Service Accounts,DC=example,DC=com # This is the bind user for LDAP\n      vault_bindpass: Password123 # This is the password for the bind user\n      vault_groupdn: OU=Groups,DC=example,DC=com # This is the search base for groups in LDAP\n      vault_upndomain: \"{{ domain }}\" # This is the UPN domain for LDAP\n      vault_ldaps_url: ldaps://dc1.example.com # This is the LDAP server that will be used for Vault\n      vault_userdn: OU=Users,DC=example,DC=com # This is the search base for users in LDAP\n      vault_ldap_admin_group_name: vault-admins # This is the LDAP group that will have admin access to Vault\n\n      vault_create_root_ca: true # Create a self-signed root CA\n      vault_create_intermediate_ca: true # Create an intermediate CA (signed by the root CA)\n\n      #########\n      # Nexus #\n      #########\n\n      nexus_proxy_container_name: caddy\n      nexus_ldap_name: \"{{ domain }}\" # This is the name of the LDAP configuration in Nexus\n      nexus_ldap_host: dc1.example.com # This is the LDAP server that will be used for Nexus\n      nexus_ldap_search_base: DC=example,DC=com # This is the search base for users in LDAP\n      nexus_bind_user_dn: CN=nexus.service.account,OU=Service Accounts,DC=example,DC=com # This is the bind user for LDAP\n      nexus_groups_dn_under_searchbase: OU=Groups # This is the search base for groups in LDAP under the nexus_ldap_search_base\n      nexus_bind_dn_password: Password123 # This is the password for the bind user\n      nexus_ldap_administrators_group: nexus-admins # This is the group that will be used for Nexus administrators\n</code></pre>"},{"location":"nova-core-collection/nexus.html","title":"nexus","text":"<p>This is a role for installing and configuring Nexus Repository Manager 3 on a in Docker on a Ubuntu/Debian host. This role can be used for following:</p> <ul> <li>Install Nexus with Docker Compose</li> <li>Run initial configuration of Nexus (optional)</li> <li>Install LDAP configuration for Nexus (optional)</li> </ul>"},{"location":"nova-core-collection/nexus.html#requirements","title":"Requirements","text":"<ul> <li>Requires an external reverse proxy (nginx, traefik, haproxy, caddy etc.) in front of Nexus to handle GUI access and TLS termination.</li> </ul>"},{"location":"nova-core-collection/nexus.html#role-variables","title":"Role Variables","text":"<p>Refer to defaults/main.yml for the full list of variables, their default values and descriptions.</p>"},{"location":"nova-core-collection/nexus.html#required-variables-for-installation","title":"Required Variables for Installation","text":"<ul> <li><code>docker_network</code></li> </ul>"},{"location":"nova-core-collection/nexus.html#required-variables-for-configuration","title":"Required Variables for Configuration","text":"<ul> <li><code>fqdn</code></li> <li><code>nexus_admin_password</code></li> </ul>"},{"location":"nova-core-collection/nexus.html#required-variables-for-ldap-configuration","title":"Required Variables for LDAP Configuration","text":"<ul> <li><code>nexus_ldap_name</code></li> <li><code>nexus_ldap_host</code></li> <li><code>nexus_ldap_search_base</code></li> <li><code>nexus_bind_user_dn</code></li> <li><code>nexus_bind_user_password</code></li> <li><code>nexus_groups_dn_under_searchbase</code></li> <li><code>nexus_nexus_ldap_administrators_group</code></li> </ul> <p>Alternatively the whole <code>nexus_ldap_configuration</code> block can be defined as a single variable to configure LDAP. See defaults/main.yml for the full list of variables.</p>"},{"location":"nova-core-collection/nexus.html#dependencies","title":"Dependencies","text":"<ul> <li>Depends on Docker and Docker Compose being installed on the host. Docker can be installed using the nova.core.docker role.</li> </ul>"},{"location":"nova-core-collection/nexus.html#example","title":"Example","text":"<pre><code># Installs Nexus without configuring it. Initial configuration can be done manually from the web GUI.\n- name: Installing Nexus...\n  ansible.builtin.include_role:\n    name: nova.core.nexus\n\n# Installs Nexus and runs initial configuration on it.\n- name: Installing &amp; configuring Nexus...\n  ansible.builtin.include_role:\n    name: nova.core.nexus\n  vars:\n    nexus_configure: true\n    nexus_admin_password: # lookup to a predefined password that will be applied to the admin user on first run\n\n# Installs Nexus and runs initial configuration on it and configures LDAP.\n- name: Installing &amp; configuring Nexus...\n  ansible.builtin.include_role:\n    name: nova.core.nexus\n  vars:\n    nexus_configure: true\n    nexus_admin_password: # lookup to a predefined password that will be applied to the admin user on first run\n    nexus_configure_ldap: true\n    nexus_ldap_name: example.com\n    nexus_ldap_host: dc1.example.com\n    nexus_ldap_search_base: OU=ORG,DC=example,DC=com\n    nexus_bind_user_dn: CN=svc_nexus,OU=Service Accounts,OU=ORG,DC=example,DC=com\n    nexus_groups_dn_under_searchbase: OU=Nexus,OU=Resources\n    nexus_bind_dn_password: # lookup to a predefined password for the svc_nexus user\n    nexus_ldap_administrators_group: Nexus Admins\n</code></pre>"},{"location":"nova-core-collection/os_configuration.html","title":"os_configuration","text":"<p>This is a universal role that is included in start.yml. It is used to run different general operating system configuration tasks. Such as configuring hostname, Windows activation, Linux host ssh keys and machine id regeneration etc.</p>"},{"location":"nova-core-collection/os_configuration.html#requirements","title":"Requirements","text":"<p>None</p>"},{"location":"nova-core-collection/os_configuration.html#role-variables","title":"Role Variables","text":"<p>Refer to defaults/main.yml for the full list of variables.</p>"},{"location":"nova-core-collection/os_configuration.html#dependencies","title":"Dependencies","text":"<p>None</p>"},{"location":"nova-core-collection/os_configuration.html#example","title":"Example","text":"<p>Since this role already gets included in <code>start.yml</code> there is no need to include it in your playbook. However, if you want to run it separately, you can do so with:</p> <pre><code>- name: Including os_configuration role\n  include_role:\n    name: nova.core.os_configuration\n</code></pre>"},{"location":"nova-core-collection/outline.html","title":"outline","text":"<p>These are the required variables that you need to define for your environment.</p> <pre><code>## Database password\npostgres_password:\n\n## For accessing the configured bucket in minio\noutline_s3_access_key_id:\noutline_s3_secret_access_key:\n\n## These secrets need to be 32 byte hex strings. Generate with \"openssl rand -hex 32\"\noutline_secret_key:\noutline_utils_secret_key:\n\n## Generic OIDC configuration\noutline_oidc_client_id:\noutline_oidc_client_secret:\n\n## Example with keycloak\noutline_oidc_auth_uri: https://keycloak.example.net/auth/realms/EXAMPLE/protocol/openid-connect/auth\noutline_oidc_token_uri: https://keycloak.example.net/auth/realms/EXAMPLE/protocol/openid-connect/token\noutline_oidc_userinfo_uri: https://keycloak.example.net/auth/realms/EXAMPLE/protocol/openid-connect/userinfo\noutline_oidc_logout_uri: https://keycloak.example.net/auth/realms/EXAMPLE/protocol/openid-connect/logout\n## Outline landing page visual effect only\noutline_oidc_display_name: \"OIDC provider\"\n</code></pre>"},{"location":"nova-core-collection/outline.html#minio-for-s3-compatible-file-storage-service","title":"Minio for s3 compatible file storage service","text":"<p>The latest versions of outline can now store files in a filesystem mount, previously an s3 service was a requirement. This role still uses minio for s3. We have not tested the new feature yet.</p>"},{"location":"nova-core-collection/outline.html#minio","title":"Minio","text":"<p>Using this role we setup minio to be hosted on the same instance as outline itself, behind a reverse proxy. The minio service opens 2 ports - one for the user facing API and one for the administration console.</p> <p>Once the minio service is up, using the administrators console, create a bucket for outline file storage. Add a user and assign an access policy that allows access to said bucket. Do not leave the bucket open as a \"public bucket\"</p> <p>Bucket access policy example - take care that you define the correct bucket name.</p> <pre><code>{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:GetBucketLocation\",\n        \"s3:ListBucket\",\n        \"s3:ListBucketMultipartUploads\"\n      ],\n      \"Resource\": [\"arn:aws:s3:::odata\"]\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:AbortMultipartUpload\",\n        \"s3:DeleteObject\",\n        \"s3:GetObject\",\n        \"s3:ListMultipartUploadParts\",\n        \"s3:PutObject\"\n      ],\n      \"Resource\": [\"arn:aws:s3:::odata/*\"]\n    }\n  ]\n}\n</code></pre>"},{"location":"nova-core-collection/outline.html#public-folders-in-the-private-bucket","title":"Public folders in the private bucket","text":"<p>Outline wants to store and show user profile pictures under bucketname/public/ and some other avatars under bucketname/avatars/. Since we have locked down our bucket to be private, we have to add anonymous access rules under the bucket configuration (readonly access)</p> <pre><code>avatars/\npublic/\n</code></pre>"},{"location":"nova-core-collection/outline.html#minio-automatic-configuration-for-outline","title":"Minio automatic configuration for outline","text":"<p>This role will also configure the minio service for outline, using minio client. Default is set to true by variable <code>minio_client_configuration</code></p>"},{"location":"nova-core-collection/outline.html#reverse-proxy-for-the-services","title":"Reverse proxy for the services","text":"<p>Configuring a reverse proxy is not in the scope of this role. Example configuration: https://docs.getoutline.com/s/hosting/doc/nginx-6htaRboR57</p> <p>Keep in mind that you need to configure the reverse proxy for the outline service and the s3 service as well.</p> <p>Example</p> <ul> <li>https://outline.domain.tld -&gt; http://outline:3000</li> <li>https://s3-outline.domain.tld -&gt; http://outline:9000</li> <li>https://s3-console-outline.domain.tld -&gt; http://outline-storage:9090</li> </ul>"},{"location":"nova-core-collection/outline.html#importing-and-exporting","title":"Importing and exporting","text":"<ul> <li>In order for the exporting/importing functions to be successful, please make sure that you have connectivity between the outline application container and the s3 service (that can also be a container, running on the same host).</li> <li>If importing or exporting fails, make sure that there are no DNS issues (that the outline container can resolve the s3 service), no certificate trust issues etc.</li> <li>Exporting the wiki does not include users, groups or any permission schemes, only articles and attachments are included. Makes sense to always make backups at the OS level as well.</li> <li>Exporting the wiki includes only those collections that you have the permissions to read, even if you are admin.</li> </ul>"},{"location":"nova-core-collection/powerstate.html","title":"powerstate","text":"<p>This role can be used to manage the powerstate of a Virtual Machine. It can be used to power on-off, reset, susepend or reboot a VM.</p>"},{"location":"nova-core-collection/powerstate.html#requirements","title":"Requirements","text":"<p>none</p>"},{"location":"nova-core-collection/powerstate.html#role-variables","title":"Role Variables","text":"<p>Refer to the defaults/main.yml file for a list and description of the variables used in this role.</p>"},{"location":"nova-core-collection/powerstate.html#dependencies","title":"Dependencies","text":"<p>none</p>"},{"location":"nova-core-collection/powerstate.html#example-playbook","title":"Example Playbook","text":"<pre><code>- name: Shutting down the VM...\n  ansible.builtin.include_role:\n    name: nova.core.powerstate\n  vars:\n    shutdown: true # This will try a graceful shutdown\n\n- name: Powering on the VM...\n  ansible.builtin.include_role:\n    name: nova.core.powerstate\n  vars:\n    poweron: true\n\n- name: Rebooting the VM...\n  ansible.builtin.include_role:\n    name: nova.core.powerstate\n  vars:\n    restart: true\n\n- name: Suspending the VM...\n  ansible.builtin.include_role:\n    name: nova.core.powerstate\n  vars:\n    suspend: true\n\n- name: Resetting the VM...\n  ansible.builtin.include_role:\n    name: nova.core.powerstate\n  vars:\n    reset: true\n\n- name: Powering off the VM...\n  ansible.builtin.include_role:\n    name: nova.core.powerstate\n  vars:\n    poweroff: true # This will force a power off\n</code></pre>"},{"location":"nova-core-collection/providentia.html","title":"providentia","text":"<p>This is a role for installing Providentia in Docker on a Ubuntu/Debian host.</p>"},{"location":"nova-core-collection/providentia.html#requirements","title":"Requirements","text":"<ul> <li>Tested on Ubuntu 22.04 but should work on any Debian based system.</li> </ul>"},{"location":"nova-core-collection/providentia.html#role-variables","title":"Role Variables","text":"<p>Refer to defaults/main.yml for the full list of variables, their default values and descriptions.</p> <p>Required variables:</p> <ul> <li><code>providentia_app_fqdn</code> - which DNS name will be used for the application</li> </ul> <p>If included, the keycloak will be using <code>keycloak.{{ providentia_app_fqdn }}</code> as its FQDN.</p>"},{"location":"nova-core-collection/providentia.html#dependencies","title":"Dependencies","text":"<ul> <li>Depends on Docker and Docker Compose being installed on the host. By default, nova.core.docker role is included, this can be disabled by setting <code>providentia_install_docker</code> to false.</li> <li>Certificates for reverse proxy, if used with TLS</li> </ul>"},{"location":"nova-core-collection/providentia.html#notes","title":"Notes","text":"<p>The builtin Keycloak is not secure by default: it is configured with HTTP (as Providentia does not trust self-signed certificates) by default and very weak passwords. This can and should be altered in real deployments!</p> <p>By default, the prebuilt image will be pulled from github - setting <code>providentia_deploy_branch</code> variable will clone the repository and build the image on host instead.</p>"},{"location":"nova-core-collection/providentia.html#example","title":"Example","text":"<pre><code># Installs Providentia with all components at FQDN `providentia.example.com`\n- name: Installing Providentia...\n  ansible.builtin.include_role:\n    name: nova.core.providentia\n  vars:\n    providentia_app_fqdn: providentia.example.com\n\n# Installs Providentia with all components at FQDN `providentia.example.com` with pregenerated TLS\n- name: Installing Providentia...\n  ansible.builtin.include_role:\n    name: nova.core.providentia\n  vars:\n    providentia_app_fqdn: providentia.example.com\n    providentia_builtin_reverse_proxy_tls_mode: pregenerated\n    providentia_builtin_reverse_proxy_tls_pregenerated_cert: \"/srv/certs/providentia.example.com_fullchain.crt\"\n    providentia_builtin_reverse_proxy_tls_pregenerated_key: \"/srv/certs/providentia.example.com_key.crt\"\n\n# Installs Providentia at FQDN `providentia.example.com` with pregenerated TLS and external OpenID Connect provider\n- name: Installing Providentia...\n  ansible.builtin.include_role:\n    name: nova.core.providentia\n  vars:\n    providentia_app_fqdn: providentia.example.com\n    providentia_builtin_reverse_proxy_tls_mode: pregenerated\n    providentia_builtin_reverse_proxy_tls_pregenerated_cert: \"/srv/certs/providentia.example.com_fullchain.crt\"\n    providentia_builtin_reverse_proxy_tls_pregenerated_key: \"/srv/certs/providentia.example.com_key.crt\"\n\n    providentia_builtin_keycloak: false\n    providentia_oidc_issuer: https://keycloak.example.com/realms/Providentia\n    providentia_oidc_client_id: ProvidentiaLive\n    providentia_oidc_client_secret: 12345\n</code></pre>"},{"location":"nova-core-collection/rename_vm.html","title":"rename_vm","text":"<p>Role for renaming existing VMs, useful for bulk rename.</p>"},{"location":"nova-core-collection/rename_vm.html#requirements","title":"Requirements","text":"<p>None</p>"},{"location":"nova-core-collection/rename_vm.html#role-variables","title":"Role Variables","text":"<p><code>old_vm_name</code> - The current name of the VM to be renamed. <code>new_vm_name</code> - The new name of the VM to be renamed.</p>"},{"location":"nova-core-collection/rename_vm.html#dependencies","title":"Dependencies","text":"<p>None</p>"},{"location":"nova-core-collection/rename_vm.html#example","title":"Example","text":"<pre><code># Rename single VM with Catapult command\n# Looks up the current VM name and renames it to the new name\nctp vm rename &lt;inventory_hostname&gt; -e new_vm_name=&lt;new_vm_name&gt;\n</code></pre> <pre><code>- name: Name of the task\n  ansible.builtin.include_role:\n    name: nova.core.rename_vm\n  vars:\n    new_vm_name: &lt;new_vm_name&gt; # Can use variable from group vars to template the new name format for bulk rename\n</code></pre>"},{"location":"nova-core-collection/role_metadata_post.html","title":"role_metadata_post","text":"<p>This is a role for gathering posting role specific metadata to Providentia or custom metadata server at the end of the deploy. The metadata itself can be gathered with the <code>nova.core.role_metadata_generate</code> role.</p>"},{"location":"nova-core-collection/role_metadata_post.html#requirements","title":"Requirements","text":"<p>none</p>"},{"location":"nova-core-collection/role_metadata_post.html#role-variables","title":"Role Variables","text":"<p>Required variables are:</p> <ul> <li><code>role_metadata_post_keycloak_uri</code> - The URI of the Keycloak server used for Providentia authentication.</li> <li><code>role_metadata_post_providentia_uri</code> - The URI of the Providentia server.</li> <li><code>role_metadata_post_keycloak_realm_name</code> - The name of the Keycloak realm used for Providentia authentication.</li> </ul> <p>Refer to the defaults/main.yml file for a list and description of the variables used in this role.</p>"},{"location":"nova-core-collection/role_metadata_post.html#dependencies","title":"Dependencies","text":"<p>none</p>"},{"location":"nova-core-collection/role_metadata_post.html#example","title":"Example","text":"<pre><code># all.yml or some other group_vars file\ngenerate_role_metadata: true # Generates role metadata where applicable and posts it to Providentia in nova.core.finalize role\nrole_metadata_post_providentia_uri: https://providentia.example.com\nrole_metadata_post_keycloak_uri: https://keycloak.example.com\nrole_metadata_post_keycloak_realm_name: master\n</code></pre>"},{"location":"nova-core-collection/secrets_to_vault.html","title":"save_secrets","text":"<p>This is a role for saving secrets to Hashicorp Vault. It is has three modes of operation:</p> <ul> <li>User accounts passwords - Will generate (if needed) and save the password for items in <code>user_accounts</code>, <code>domain_user_accounts</code> &amp; <code>admin_accounts</code> lists to Vault.</li> <li>Pregenerated secrets - Secrets are generated by the role and passed in as list for the role and the roles saves them to Vault if they do not already exist.</li> <li>Auto-generated secrets - Secrets cannot be generated by the user but are generated automatically by some application and only shown once (API keys, tokens etc). In that case this role will save the secret to Vault overwriting any existing secret with the same name.</li> </ul> <p>Refer to nova.core.accounts role for more information about the <code>user_accounts</code>, <code>domain_user_accounts</code> &amp; <code>admin_accounts</code> lists.</p>"},{"location":"nova-core-collection/secrets_to_vault.html#requirements","title":"Requirements","text":"<p>Vault server with LDAP authentication enabled needs to be running and accessible. It can be installed using the nova.core.vault role.</p>"},{"location":"nova-core-collection/secrets_to_vault.html#role-variables","title":"Role Variables","text":"<p>Refer to defaults/main.yml for the full list of variables, their default values and descriptions.</p>"},{"location":"nova-core-collection/secrets_to_vault.html#required-variables","title":"Required Variables","text":"<ul> <li><code>secrets_vault_address</code> - Address of the Vault server ex. <code>https://vault.example.com</code></li> <li><code>secrets_vault_engine_path</code> - Path to the secrets engine in Vault ex. <code>kv</code></li> <li><code>secrets_vault_secrets_path</code> - Path to the under secrets under the secrets engine in Vault ex. <code>secrets</code></li> </ul>"},{"location":"nova-core-collection/secrets_to_vault.html#required-variables-for-accounts-passwords","title":"Required Variables for Accounts Passwords","text":"<ul> <li><code>save_secrets_to_vault: true</code> - Enable on a host or group_var to make sure that this role get's included in <code>start.yml</code> and items in <code>user_accounts</code>, <code>domain_user_accounts</code> &amp; <code>admin_accounts</code> lists are saved to Vault.</li> </ul>"},{"location":"nova-core-collection/secrets_to_vault.html#example","title":"Example","text":"<pre><code>- name: Saving secrets to Vault...\n  ansible.builtin.include_role:\n    name: nova.core.secrets_to_vault\n  vars:\n    secrets_vault_address: https://vault.example.com\n    secrets_vault_engine_path: kv\n    secrets_vault_secrets_path: secrets\n    secrets:\n      # Predefined secret to save to vault under kv/data/secrets\n      - key: secret1\n        value: password1\n      # Predefined secret with a random generated value to save to vault under kv/data/secrets\n      - key: secret2\n        value: \"{{ lookup('password', '/dev/null length=32 chars=hexdigits') }}\"\n      # Predefined secret with a random generated value by the the role kv/data/secrets\n      - key: secret3\n\n- name: Saving secrets to Vault and overwriting any existing that match the key...\n  ansible.builtin.include_role:\n    name: nova.core.secrets_to_vault\n  vars:\n    secrets_vault_address: https://vault.example.com\n    secrets_vault_engine_path: kv\n    secrets_vault_secrets_path: secrets\n    autogenerated_secret: true\n    secrets:\n      # Predefined secret with a random generated value to save to vault under kv/data/secrets\n      - key: secret2\n        value: \"{{ lookup('password', '/dev/null length=32 chars=hexdigits') }}\"\n\n- name: Saving secrets to Vault and overwriting any existing that match the key per item...\n  ansible.builtin.include_role:\n    name: nova.core.secrets_to_vault\n  vars:\n    secrets_vault_address: https://vault.example.com\n    secrets_vault_engine_path: kv\n    secrets_vault_secrets_path: secrets\n    secrets:\n      # Predefined secret with a random generated value to save to vault under kv/data/secrets\n      - key: secret2\n        value: \"{{ lookup('password', '/dev/null length=32 chars=hexdigits') }}\"\n        autogenerated_secret: true\n\n- name: Saving secrets to Vault but each item to different engine and path...\n  ansible.builtin.include_role:\n    name: nova.core.secrets_to_vault\n  vars:\n    secrets_vault_address: https://vault.example.com\n    secrets:\n      # Predefined secret to save to vault under kv/data/secrets\n      - key: secret1\n        value: password1\n        secrets_vault_engine_path: kv1\n        secrets_vault_secrets_path: user01/secrets1\n      # Predefined secret with a random generated value to save to vault under kv/data/secrets\n      - key: secret2\n        value: \"{{ lookup('password', '/dev/null length=32 chars=hexdigits') }}\"\n        secrets_vault_engine_path: kv2\n        secrets_vault_secrets_path: user02/secrets2\n      # Predefined secret with a random generated value by the the role kv/data/secrets\n      - key: secret3\n        secrets_vault_engine_path: kv3\n        secrets_vault_secrets_path: user03/secrets3\n</code></pre>"},{"location":"nova-core-collection/snapshots.html","title":"snapshots","text":"<p>This is a role for creating and managing snapshots of virtual machines. Currently supported environments are: <code>vSphere</code>, <code>VMware Workstation</code> &amp; <code>Proxmox VE</code>.</p>"},{"location":"nova-core-collection/snapshots.html#requirements","title":"Requirements","text":"<p>none</p>"},{"location":"nova-core-collection/snapshots.html#role-variables","title":"Role Variables","text":"<p>Refer to defaults/main.yml for the full list of variables, their default values and descriptions.</p> <p>One of the following variables must be set:</p> <ul> <li><code>snapshot_mode == 'snap'</code></li> <li>If <code>live_snap: true</code> - Adds a new snapshot to the VM with the live memory</li> <li>If <code>live_snap: false</code> - Shuts down VM, adds a new snapshot to the VM, starts the VM</li> <li><code>snapshot_mode == 'clean-snap'</code></li> <li>If <code>live_snap: true</code> - Removes all existing snapshots from the VM, adds a new one</li> <li>If <code>live_snap: false</code> - Shuts down VM, removes all existing snapshots from the VM, starts the VM</li> <li><code>snapshot_mode == 're-snap'</code></li> <li>If <code>live_snap: true</code> - Deletes the current snapshot from the VM and creates a new one</li> <li>If <code>live_snap: false</code> - Shuts down VM, removes the current snapshot from the VM, starts the VM</li> <li><code>snapshot_mode == 'revert'</code></li> <li>Reverts the VM to the snapshot with the name specified in <code>snapshot_name</code></li> <li>If no <code>snapshot_name</code> is specified, the current snapshot will be used</li> <li><code>snapshot_mode == 'rename'</code></li> <li>Renames the snapshot with the name specified in <code>snapshot_name</code> variable with a name defined in the <code>new_snapshot_name</code> variable</li> <li><code>snapshot_mode == 'remove'</code></li> <li>Removes the snapshot with the name specified in <code>snapshot_name</code> variable.</li> <li>If no <code>snapshot_name</code> is specified, the current snapshot will be used</li> <li>If <code>remove_all_snapshots: true</code> all snapshots will be removed</li> </ul> <p>Modifiers:</p> <ul> <li><code>live_snap</code> (true|false) - Affects <code>snap</code>, <code>clean-snap</code>, <code>re-snap</code></li> <li><code>snapshot_name</code> (string) - Used to interact with the snapshots</li> <li><code>new_snapshot_name</code> (string) - Only used when <code>rename</code></li> <li><code>start_vm_after_snapshot</code> (true|false)</li> <li><code>start_vm_after_revert</code> (true|false)</li> <li><code>remove_all_snapshots</code> (true|false)</li> </ul>"},{"location":"nova-core-collection/snapshots.html#dependencies","title":"Dependencies","text":"<p>none</p>"},{"location":"nova-core-collection/snapshots.html#example","title":"Example","text":"<pre><code>- name: Removing all existing snapshots from a VM and creating a new one with a name LinkedCloneSource and not starting VM after snapshot...\n  ansible.builtin.include_role:\n    name: nova.core.snapshots\n  vars:\n    snapshot_mode: clean-snap\n    snapshot_name: LinkedCloneSource\n    start_vm_after_snapshot: false\n</code></pre> <pre><code>- name: Adding a new snapshot to a VM while it is running...\n  ansible.builtin.include_role:\n    name: nova.core.snapshots\n  vars:\n    snapshot_mode: snap\n    live_snap: true\n</code></pre> <pre><code>- name: Shutting down a VM, adding a new snapshot to it and starting it again...\n  ansible.builtin.include_role:\n    name: nova.core.snapshots\n  vars:\n    snapshot_mode: snap\n</code></pre> <pre><code>- name: Deleting the current snapshot from a VM...\n  ansible.builtin.include_role:\n    name: nova.core.snapshots\n  vars:\n    snapshot_mode: remove\n    snapshot_name: LinkedCloneSource\n</code></pre> <pre><code>- name: Deleting all snapshots from a VM...\n  ansible.builtin.include_role:\n    name: nova.core.snapshots\n  vars:\n    snapshot_mode: remove\n    snapshot_name: LinkedCloneSource\n    remove_all_snapshots: true\n</code></pre> <pre><code>- name: Renaming a snapshot of a VM...\n  ansible.builtin.include_role:\n    name: nova.core.snapshots\n  vars:\n    snapshot_mode: rename\n    snapshot_name: OldSnapshotName\n    new_snapshot_name: NewSnapshotName\n</code></pre> <pre><code>- name: Reverting to a snapshot called MySnapshotName of a VM...\n  ansible.builtin.include_role:\n    name: nova.core.snapshots\n  vars:\n    snapshot_mode: revert\n    snapshot_name: MySnapshotName\n</code></pre>"},{"location":"nova-core-collection/template_os_configuration.html","title":"template_os_configuration","text":"<p>This is a role to pre-configure a VM template. It is recommended that you have your VM templates in separate project or separately in your project's inventory so you use this role to configure them for use with the rest of the roles in this collection.</p>"},{"location":"nova-core-collection/template_os_configuration.html#requirements","title":"Requirements","text":"<p>none</p>"},{"location":"nova-core-collection/template_os_configuration.html#role-variables","title":"Role Variables","text":"<p>Refer to the defaults/main.yml file for a list and description of the variables used in this role.</p> <p>Currently some of the when conditions expect you to have specifically named group vars defined for certain settings to applied.</p> <p>Examples:</p> <p><code>os_bsd</code> - for BSD based distros <code>os_linux</code> - for Linux based distros <code>os_windows</code> - for Windows OS</p>"},{"location":"nova-core-collection/template_os_configuration.html#dependencies","title":"Dependencies","text":"<p>none</p>"},{"location":"nova-core-collection/template_os_configuration.html#example","title":"Example","text":"<pre><code>- name: Including OS configuration role with updates...\n  ansible.builtin.include_role:\n    name: nova.core.template_os_configuration\n  vars:\n    update_system: true\n</code></pre>"},{"location":"nova-core-collection/trusted_certificates.html","title":"trusted_certificates","text":"<p>This role installs trusted certificates on the target Windows, Linux or VyOS system. Trusted certificates are used to verify the identity of a remote system. This role is used to install certificates that are not part of the default trusted certificate store. The source of the certificates can be a file for url.</p>"},{"location":"nova-core-collection/trusted_certificates.html#requirements","title":"Requirements","text":"<p>The certificates must be in PEM (base64 encoded) format. The role will convert the certificates to the correct format for the target system.</p>"},{"location":"nova-core-collection/trusted_certificates.html#role-variables","title":"Role Variables","text":"<p>Refer to defaults/main.yml for the full list of variables.</p>"},{"location":"nova-core-collection/trusted_certificates.html#dependencies","title":"Dependencies","text":"<p>none</p>"},{"location":"nova-core-collection/trusted_certificates.html#example","title":"Example","text":"<pre><code># This example will install the RootCA certificate from the url http://example.com/pem and the SecondRootCA certificate from the local file SecondRootCA.cer. The certificates will also be added to the Java truststore.\n- name: Including trusted_certificates role...\n  ansible.builtin.include_role:\n    name: nova.core.trusted_certificates\n  vars:\n    trusted_certificates_to_jks: true\n    trusted_certificates_list:\n      - name: RootCA\n        src: http://example.com/pem\n      - name: SecondRootCA\n        src: SecondRootCA.cer\n</code></pre>"},{"location":"nova-core-collection/tuoni.html","title":"tuoni","text":"<p>This is a role for installing the Tuoni C2 framework on Debian-based host.</p>"},{"location":"nova-core-collection/tuoni.html#requirements","title":"Requirements","text":"<p>none</p>"},{"location":"nova-core-collection/tuoni.html#role-variables","title":"Role Variables","text":"<p>Refer to defaults/main.yml for the full list of variables.</p>"},{"location":"nova-core-collection/tuoni.html#dependencies","title":"Dependencies","text":"<p>none</p>"},{"location":"nova-core-collection/tuoni.html#example","title":"Example","text":"<pre><code>- name: Including Tuoni role...\n  ansible.builtin.include_role:\n    name: nova.core.tuoni\n</code></pre>"},{"location":"nova-core-collection/updates.html","title":"updates","text":"<p>This role is used to update the operating system packages. Currently supported operating systems are: Ubuntu/Debian, Windows &amp; Arch Linux.</p> <p>Debian family operating systems can be configured to run unattended updates, with additional option to allow unattended reboots if required.</p>"},{"location":"nova-core-collection/updates.html#requirements","title":"Requirements","text":"<p>None</p>"},{"location":"nova-core-collection/updates.html#role-variables","title":"Role Variables","text":"<p>Refer to the defaults/main.yml file for a list of variables and their default values.</p>"},{"location":"nova-core-collection/updates.html#dependencies","title":"Dependencies","text":"<p>None</p>"},{"location":"nova-core-collection/updates.html#example","title":"Example","text":"<pre><code># Use the existing Catapult CLI alias to only run this role for a specific host.\nctp host update &lt;inventpry_hostname&gt;\n</code></pre> <pre><code># Use the role in a playbook.\n- name: Update the operating system\n  ansible.builtin.include_role:\n    name: nova.core.updates\n</code></pre>"},{"location":"nova-core-collection/vault.html","title":"vault","text":"<p>This is a role for installing and configuring Hashicorp Vault. This role can be used to:</p> <ul> <li>Run initial setup of Vault</li> <li>Configure Vault to integrate with LDAP</li> <li>Enable and configure the PKI secrets engine</li> </ul> <p>During initial setup of Vault, the root token and unseal key(s) are saved to <code>/srv/vault/creds</code> folder. Make sure to move these to a safe location after initial setup and use Ansible lookup plugins to retrieve them when needed.</p>"},{"location":"nova-core-collection/vault.html#requirements","title":"Requirements","text":"<ul> <li>Requires an external reverse proxy (nginx, traefik, haproxy, caddy etc.) to handle GUI access and TLS termination.</li> </ul>"},{"location":"nova-core-collection/vault.html#role-variables","title":"Role Variables","text":"<p>Refer to defaults/main.yml for the full list of variables, their default values and descriptions.</p>"},{"location":"nova-core-collection/vault.html#dependencies","title":"Dependencies","text":"<ul> <li>Depends on Docker and Docker Compose being installed on the host. Docker can be installed using the nova.core.docker role.</li> </ul>"},{"location":"nova-core-collection/vault.html#example","title":"Example","text":"<pre><code># Installing Vault with default values and configuring everything manually\n- name: Installing Vault...\n  ansible.builtin.include_role:\n    name: nova.core.vault\n</code></pre> <pre><code># Installing Vault and running initial configuration\n- name: Installing &amp; configuring Vault...\n  ansible.builtin.include_role:\n    name: nova.core.vault\n    vars:\n      vault_configure: true\n</code></pre> <pre><code># Installing Vault and running initial configuration and configuring LDAP\n- name: Installing &amp; configuring Vault with LDAP...\n  ansible.builtin.include_role:\n    name: nova.core.vault\n    vars:\n      vault_configure: true\n      vault_configure_ldap: true\n      vault_configuration_uri: https://vault.example.com\n      vault_binddn: CN=svc_nexus,OU=Service Accounts,OU=ORG,DC=example,DC=com\n      vault_bindpass: # lookup to a predefined password for the svc_nexus user\n      vault_groupdn: OU=Vault,OU=Groups,OU=ORG,DC=example,DC=com\n      vault_upndomain: example.com\n      vault_ldaps_url: ldaps://dc1.example.com # Can be LDAP or LDAPS\n      vault_userdn: OU=Users,OU=ORG,DC=example,DC=com\n      vault_ldaps_certificate_source: /usr/local/share/ca-certificates/LDAPRootCA.crt # Path or URL to the LDAP server's root CA certificate\n</code></pre> <pre><code># Installing Vault and running initial configuration and configuring LDAP and creating a policy for developers\n- name: Installing &amp; configuring Vault with LDAP...\n  ansible.builtin.include_role:\n    name: nova.core.vault\n    vars:\n      vault_configure: true\n      vault_configure_ldap: true\n      vault_configuration_uri: https://vault.example.com\n      vault_binddn: CN=svc_nexus,OU=Service Accounts,OU=ORG,DC=example,DC=com\n      vault_bindpass: # lookup to a predefined password for the svc_nexus user\n      vault_groupdn: OU=Vault,OU=Groups,OU=ORG,DC=example,DC=com\n      vault_upndomain: example.com\n      vault_ldaps_url: ldaps://dc1.example.com # Can be LDAP or LDAPS\n      vault_userdn: OU=Users,OU=ORG,DC=example,DC=com\n      vault_ldaps_certificate_source: /usr/local/share/ca-certificates/LDAPRootCA.crt # Path or URL to the LDAP server's root CA certificate\n      vault_policies:\n        - policy_name: developers\n          policy_content: |-\n            path \"developers/data/*\" { capabilities = [\"create\", \"read\", \"update\", \"patch\", \"delete\", \"list\"] }\n            path \"developers/metadata/*\" { capabilities = [\"create\", \"read\", \"update\", \"patch\", \"delete\", \"list\"] }\n            path \"developers/metadata\" { capabilities = [\"list\"] }\n          vault_group_name: developers\n          ldap_group_name: vault-developers # This is the LDAP group name that will be mapped to the Vault group for this policy\n</code></pre> <pre><code># Installing Vault and running initial configuration and configuring PKI with default values\n- name: Installing &amp; configuring Vault with PKI...\n  ansible.builtin.include_role:\n    name: nova.core.vault\n    vars:\n      vault_configure: true\n      vault_create_root_ca: true # Create a self-signed root CA based on the role defaults\n      vault_create_intermediate_ca: true # Create an intermediate CA (signed by the root CA) based on the role defaults\n</code></pre>"},{"location":"nova-core-collection/vcenter_vmtools_policy.html","title":"vcenter_vmtools_policy","text":"<p>This role is used to manage the VMware Tools policy on a vSphere Virtual Machine. It can be used to upgrade VMware Tools on a VM or set the policy to check and upgrade VMware Tools on the next reboot.</p>"},{"location":"nova-core-collection/vcenter_vmtools_policy.html#requirements","title":"Requirements","text":"<p>none</p>"},{"location":"nova-core-collection/vcenter_vmtools_policy.html#role-variables","title":"Role Variables","text":"<p>Refer to the defaults/main.yml file for a list and description of the variables used in this role.</p>"},{"location":"nova-core-collection/vcenter_vmtools_policy.html#dependencies","title":"Dependencies","text":"<p>none</p>"},{"location":"nova-core-collection/vcenter_vmtools_policy.html#example","title":"Example","text":"<pre><code>- name: Upgrading VMware Tools on the VM and setting the upgrade policy to manual...\n  ansible.builtin.include_role:\n    name: nova.core.vcenter_vmtools_policy\n\n- name: Setting the upgrade policy to check and upgrade VMware Tools on the next reboot...\n  ansible.builtin.include_role:\n    name: nova.core.vcenter_vmtools_policy\n  vars:\n    vmtools_upgrade_policy: UPGRADE_AT_POWER_CYCLE\n</code></pre>"},{"location":"nova-core-collection/win_configure_rdp.html","title":"win_configure_rdp","text":"<p>Role for enabling or disabling RDP on Windows hosts.</p>"},{"location":"nova-core-collection/win_configure_rdp.html#requirements","title":"Requirements","text":"<p>None</p>"},{"location":"nova-core-collection/win_configure_rdp.html#role-variables","title":"Role Variables","text":"<p>Check the <code>defaults/main.yml</code> file for the full list of variables.</p>"},{"location":"nova-core-collection/win_configure_rdp.html#dependencies","title":"Dependencies","text":"<p>None</p>"},{"location":"nova-core-collection/win_configure_rdp.html#example","title":"Example","text":"<pre><code># Include the role in tasks\n- name: Name of the task\n  ansible.builtin.include_role:\n    name: nova.core.win_configure_rdp\n</code></pre> <pre><code># Include the role in meta\n---\n- dependencies:\n    - role: nova.core.win_configure_rdp\n</code></pre>"},{"location":"nova-core-collection/win_dc_post_reboot_check.html","title":"win_dc_post_reboot_check","text":"<p>Role for waiting for Windows Domain Controller to be ready after reboot. Useful to include in playbooks after DC reboot to avoid errors where Ansible tries to configure DC before it is ready.</p>"},{"location":"nova-core-collection/win_dc_post_reboot_check.html#requirements","title":"Requirements","text":"<p>None</p>"},{"location":"nova-core-collection/win_dc_post_reboot_check.html#role-variables","title":"Role Variables","text":"<p>None</p>"},{"location":"nova-core-collection/win_dc_post_reboot_check.html#dependencies","title":"Dependencies","text":"<p>None</p>"},{"location":"nova-core-collection/win_dc_post_reboot_check.html#example","title":"Example","text":"<pre><code># Include the role in tasks\n- name: Name of the task\n  ansible.builtin.include_role:\n    name: nova.core.win_dc_post_reboot_check\n</code></pre> <pre><code># Include the role in meta\n---\n- dependencies:\n    - role: nova.core.win_dc_post_reboot_check\n</code></pre>"},{"location":"nova-core-collection/win_sysprep.html","title":"win_sysprep","text":"<p>This is a role for running <code>sysprep</code> on a Windows host running on vSphere. This is automatically included in the <code>nova.core.template_os_configuration</code> role, but can be run independently if desired.</p>"},{"location":"nova-core-collection/win_sysprep.html#requirements","title":"Requirements","text":"<p>none</p>"},{"location":"nova-core-collection/win_sysprep.html#role-variables","title":"Role Variables","text":"<p><code>win_sysprep_administrator_password</code> - The password for the Administrator account after <code>sysprep</code> is run. Defaults to current <code>ansible_user</code>.</p>"},{"location":"nova-core-collection/win_sysprep.html#dependencies","title":"Dependencies","text":"<p>none</p>"},{"location":"nova-core-collection/win_sysprep.html#example","title":"Example","text":"<pre><code>- name: Running sysprep...\n  include_role: nova.core.win_sysprep\n  vars:\n    win_sysprep_administrator_password: \"MyNewPassword\"\n</code></pre>"},{"location":"nova-core-collection/win_test_pending_reboot.html","title":"win_test_pending_reboot","text":"<p>This role tests if a Windows host has a pending reboot. It downloads and installs the PendingReboot PowerShell module from the PowerShell Gallery and uses it to check if a reboot is required.</p>"},{"location":"nova-core-collection/win_test_pending_reboot.html#requirements","title":"Requirements","text":"<p>None</p>"},{"location":"nova-core-collection/win_test_pending_reboot.html#role-variables","title":"Role Variables","text":"<p>none</p>"},{"location":"nova-core-collection/win_test_pending_reboot.html#dependencies","title":"Dependencies","text":"<p>None</p>"},{"location":"nova-core-collection/win_test_pending_reboot.html#example","title":"Example","text":"<pre><code># Include the role\n- name: Including the win_test_pending_reboot module...\n  ansible.builtin.include_role:\n    name: nova.core.win_test_pending_reboot\n</code></pre>"}]}